<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Features</name>
    </assembly>
    <members>
        <member name="M:HotChocolate.Features.EmptyFeatureCollection.Get``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.EmptyFeatureCollection.Set``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.EmptyFeatureCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.EmptyFeatureCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Features.FeatureCollection">
            <summary>
            Default implementation for <see cref="T:HotChocolate.Features.IFeatureCollection"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Features.FeatureCollection"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Features.FeatureCollection"/> with the specified initial capacity.
            </summary>
            <param name="initialCapacity">
            The initial number of elements that the collection can contain.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="initialCapacity"/> is less than 0
            </exception>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.#ctor(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Features.FeatureCollection"/> with the specified defaults.
            </summary>
            <param name="defaults">
            The feature defaults.
            </param>
        </member>
        <member name="P:HotChocolate.Features.FeatureCollection.Revision">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Features.FeatureCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Features.FeatureCollection.Item(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.Get``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.FeatureCollection.Set``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Features.FeatureCollectionExtensions">
            <summary>
            Extension methods for getting feature from <see cref="T:HotChocolate.Features.IFeatureCollection"/>
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollectionExtensions.GetRequired``1(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Retrieves the requested feature from the collection.
            Throws an <see cref="T:System.InvalidOperationException"/> if the feature is not present.
            </summary>
            <param name="featureCollection">The <see cref="T:HotChocolate.Features.IFeatureCollection"/>.</param>
            <typeparam name="TFeature">The feature key.</typeparam>
            <returns>The requested feature.</returns>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollectionExtensions.GetRequired(HotChocolate.Features.IFeatureCollection,System.Type)">
            <summary>
            Retrieves the requested feature from the collection.
            Throws an <see cref="T:System.InvalidOperationException"/> if the feature is not present.
            </summary>
            <param name="featureCollection">feature collection</param>
            <param name="key">The feature key.</param>
            <returns>The requested feature.</returns>
        </member>
        <member name="M:HotChocolate.Features.FeatureCollectionExtensions.ToReadOnly(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Creates a readonly collection of features.
            </summary>
            <param name="featureCollection">
            The <see cref="T:HotChocolate.Features.IFeatureCollection"/> to make readonly.
            </param>
            <returns>
            A readonly <see cref="T:HotChocolate.Features.IFeatureCollection"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="featureCollection"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.Features.FeatureReference`1">
            <summary>
            A cached reference to a feature.
            </summary>
            <typeparam name="T">The feature type.</typeparam>
        </member>
        <member name="F:HotChocolate.Features.FeatureReference`1.Default">
            <summary>
            Gets the default <see cref="T:HotChocolate.Features.FeatureReference`1"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureReference`1.Fetch(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Gets the feature of type <typeparamref name="T"/> from <paramref name="features"/>.
            </summary>
            <param name="features">The <see cref="T:HotChocolate.Features.IFeatureCollection"/>.</param>
            <returns>The feature.</returns>
        </member>
        <member name="M:HotChocolate.Features.FeatureReference`1.Update(HotChocolate.Features.IFeatureCollection,`0)">
            <summary>
            Updates the reference to the feature.
            </summary>
            <param name="features">The <see cref="T:HotChocolate.Features.IFeatureCollection"/> to update.</param>
            <param name="feature">The instance of the feature.</param>
            <returns>A reference to <paramref name="feature"/> after the operation has completed.</returns>
        </member>
        <member name="T:HotChocolate.Features.FeatureReferences`1">
            <summary>
            A reference to a collection of features.
            </summary>
            <typeparam name="TCache">The type of the feature.</typeparam>
        </member>
        <member name="M:HotChocolate.Features.FeatureReferences`1.#ctor(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Features.FeatureReferences`1"/>.
            </summary>
            <param name="collection">The <see cref="T:HotChocolate.Features.IFeatureCollection"/>.</param>
        </member>
        <member name="M:HotChocolate.Features.FeatureReferences`1.Initialize(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Initializes the <see cref="T:HotChocolate.Features.FeatureReferences`1"/>.
            </summary>
            <param name="collection">The <see cref="T:HotChocolate.Features.IFeatureCollection"/> to initialize with.</param>
        </member>
        <member name="M:HotChocolate.Features.FeatureReferences`1.Initialize(HotChocolate.Features.IFeatureCollection,System.Int32)">
            <summary>
            Initializes the <see cref="T:HotChocolate.Features.FeatureReferences`1"/>.
            </summary>
            <param name="collection">The <see cref="T:HotChocolate.Features.IFeatureCollection"/> to initialize with.</param>
            <param name="revision">The version of the <see cref="T:HotChocolate.Features.IFeatureCollection"/>.</param>
        </member>
        <member name="P:HotChocolate.Features.FeatureReferences`1.Collection">
            <summary>
            Gets the <see cref="T:HotChocolate.Features.IFeatureCollection"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.FeatureReferences`1.Revision">
            <summary>
            Gets the revision number.
            </summary>
        </member>
        <member name="F:HotChocolate.Features.FeatureReferences`1.Cache">
            <summary>
            This API is part of ASP.NET Core's infrastructure and should not be referenced by application code.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureReferences`1.Fetch``2(``0@,``1,System.Func{``1,``0})">
            <summary>
            This API is part of ASP.NET Core's infrastructure and should not be referenced by application code.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.FeatureReferences`1.Fetch``1(``0@,System.Func{HotChocolate.Features.IFeatureCollection,``0})">
            <summary>
            This API is part of ASP.NET Core's infrastructure and should not be referenced by application code.
            </summary>
        </member>
        <member name="T:HotChocolate.Features.IFeatureCollection">
            <summary>
            Represents a collection of GraphQL features.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.IFeatureCollection.IsReadOnly">
            <summary>
            Indicates if the collection can be modified.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.IFeatureCollection.Revision">
            <summary>
            Incremented for each modification and can be used to verify cached results.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.IFeatureCollection.Item(System.Type)">
            <summary>
            Gets or sets a given feature. Setting a null value removes the feature.
            </summary>
            <param name="key"></param>
            <returns>The requested feature, or null if it is not present.</returns>
        </member>
        <member name="M:HotChocolate.Features.IFeatureCollection.Get``1">
            <summary>
            Retrieves the requested feature from the collection.
            </summary>
            <typeparam name="TFeature">The feature key.</typeparam>
            <returns>The requested feature, or null if it is not present.</returns>
        </member>
        <member name="M:HotChocolate.Features.IFeatureCollection.Set``1(``0)">
            <summary>
            Sets the given feature in the collection.
            </summary>
            <typeparam name="TFeature">The feature key.</typeparam>
            <param name="instance">The feature value.</param>
        </member>
        <member name="T:HotChocolate.Features.IFeatureProvider">
            <summary>
            An object that has features.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.IFeatureProvider.Features">
            <summary>
            Gets the feature collection.
            </summary>
        </member>
        <member name="T:HotChocolate.Features.ISealable">
            <summary>
            Represents a sealable feature.
            </summary>
        </member>
        <member name="P:HotChocolate.Features.ISealable.IsReadOnly">
            <summary>
            Defined if this feature is read-only.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.ISealable.Seal">
            <summary>
            Seals this feature.
            </summary>
        </member>
        <member name="T:HotChocolate.Features.ReadOnlyFeatureCollection">
            <summary>
            Read-only implementation for <see cref="T:HotChocolate.Features.IFeatureCollection"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Features.ReadOnlyFeatureCollection.#ctor(HotChocolate.Features.IFeatureCollection)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Features.ReadOnlyFeatureCollection"/>.
            </summary>
            <param name="features">
            The <see cref="T:HotChocolate.Features.IFeatureCollection"/> to make readonly.
            </param>
        </member>
        <member name="P:HotChocolate.Features.ReadOnlyFeatureCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Features.ReadOnlyFeatureCollection.Revision">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Features.ReadOnlyFeatureCollection.Item(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.ReadOnlyFeatureCollection.Get``1">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.ReadOnlyFeatureCollection.Set``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Features.ReadOnlyFeatureCollection.GetEnumerator">
            <inheritdoc />
        </member>
    </members>
</doc>
