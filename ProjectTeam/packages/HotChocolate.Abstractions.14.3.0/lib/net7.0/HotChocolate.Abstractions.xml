<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Abstractions</name>
    </assembly>
    <members>
        <member name="T:HotChocolate.AggregateError">
            <summary>
            An aggregate error allows to pass a collection of error in a single error object.
            </summary>
        </member>
        <member name="M:HotChocolate.AggregateError.#ctor(System.Collections.Generic.IEnumerable{HotChocolate.IError})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.AggregateError"/>.
            </summary>
            <param name="errors">
            The errors.
            </param>
        </member>
        <member name="M:HotChocolate.AggregateError.#ctor(HotChocolate.IError[])">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.AggregateError"/>.
            </summary>
            <param name="errors">
            The errors.
            </param>
        </member>
        <member name="P:HotChocolate.AggregateError.Errors">
            <summary>
            Gets the actual errors.
            </summary>
        </member>
        <member name="T:HotChocolate.ArgumentAttribute">
            <summary>
            Specifies resolver parameter represents a GraphQL field argument.
            </summary>
        </member>
        <member name="M:HotChocolate.ArgumentAttribute.#ctor(System.String)">
            <summary>
            Specifies resolver parameter represents a GraphQL field argument.
            </summary>
            <param name="name">
            The name override for the GraphQL field argument.
            </param>
        </member>
        <member name="P:HotChocolate.ArgumentAttribute.Name">
            <summary>
            Gets the name override for the GraphQL field argument.
            </summary>
        </member>
        <member name="T:HotChocolate.DiagnosticEventSourceAttribute">
            <summary>
            This attribute can be used by custom diagnostic event listeners
            to specify the source to which a listener shall be bound to.
            </summary>
        </member>
        <member name="M:HotChocolate.DiagnosticEventSourceAttribute.#ctor(System.Type)">
            <summary>
            This attribute can be used by custom diagnostic event listeners
            to specify the source to which a listener shall be bound to.
            </summary>
            <param name="listener">
            The listener interface.
            </param>
        </member>
        <member name="P:HotChocolate.DiagnosticEventSourceAttribute.Listener">
            <summary>
            Gets the listener interface.
            </summary>
        </member>
        <member name="T:HotChocolate.Error">
            <summary>
            Represents a GraphQL execution error.
            </summary>
        </member>
        <member name="M:HotChocolate.Error.#ctor(System.String,System.String,HotChocolate.Path,System.Collections.Generic.IReadOnlyList{HotChocolate.Location},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Error"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Error.Message">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Error.Code">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Error.Path">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Error.Locations">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Error.Extensions">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Error.Exception">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithCode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemoveCode">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithPath(HotChocolate.Path)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithPath(System.Collections.Generic.IReadOnlyList{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemovePath">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithLocations(System.Collections.Generic.IReadOnlyList{HotChocolate.Location})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemoveLocations">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithExtensions(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemoveExtensions">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.SetExtension(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemoveExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.WithException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Error.RemoveException">
            <inheritdoc />
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.Timeout">
            <summary>
            The request exceeded the configured timeout.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.Canceled">
            <summary>
            The request was canceled
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.CostExceeded">
            <summary>
            The operation complexity was exceeded.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.CostStateInvalid">
            <summary>
            The analyzer needs a documentId, operationId, document and coerced variables.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OneSlicingArgumentRequired">
            <summary>
            One slicing argument is required
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.PersistedOperationNotFound">
            <summary>
            A persisted operation was not found when using the active persisted operation pipeline.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OnlyPersistedOperationsAllowed">
            <summary>
            Only persisted operations are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.CannotCastParent">
            <summary>
            Cannot cast the parent type to the resolver requested type.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OneOfNoFieldSet">
            <summary>
            The Oneof Input Objects `{0}` require that exactly one field must be supplied and that
            field must not be `null`. Oneof Input Objects are a special variant of Input Objects
            where the type system asserts that exactly one of the fields must be set and non-null.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OneOfMoreThanOneFieldSet">
            <summary>
            More than one field of the Oneof Input Object `{0}` is set. Oneof Input Objects
            are a special variant of Input Objects where the type system asserts that exactly
            one of the fields must be set and non-null.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OneOfFieldIsNull">
            <summary>
            `null` was set to the field `{0}`of the Oneof Input Object `{1}`. Oneof Input Objects
            are a special variant of Input Objects where the type system asserts that exactly
            one of the fields must be set and non-null.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.OneOfFieldMustBeNonNull">
            <summary>
            Value for oneof field {field.FieldName} must be non-null.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Execution.FetchedToManyNodesAtOnce">
            <summary>
            The request tried to fetch to many nodes at once.
            </summary>
        </member>
        <member name="T:HotChocolate.ErrorCodes.Server">
            <summary>
            The server error codes.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartInvalidForm">
            <summary>
            The multipart form could not be read.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartNoOperationsSpecified">
            <summary>
            No 'operations' specified.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartFieldsMisordered">
            <summary>
            Misordered multipart fields; 'map' should follow 'operations'.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartNoObjectPath">
            <summary>
            No object paths specified for a key in the 'map'.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartFileMissing">
            <summary>
            A key is referring to a file that was not provided.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartVariableNotFound">
            <summary>
            The variable path is referring to a variable that does not exist.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartVariableStructureInvalid">
            <summary>
            No object paths specified for key in 'map'.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartInvalidPath">
            <summary>
            Invalid variable path in `map`.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartPathMustStartWithVariable">
            <summary>
            The variable path must start with `variables`.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartInvalidMapJson">
            <summary>
            Invalid JSON in the `map` multipart field; Expected type of
            <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartMapNotSpecified">
            <summary>
            No `map` specified.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.TypeParameterIsEmpty">
            <summary>
            The type parameter is empty.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.InvalidTypeName">
            <summary>
            Invalid type name when requesting the SDL.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.TypeDoesNotExist">
            <summary>
            The requested type does not exist.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.NoSupportedAcceptMediaType">
            <summary>
            The request did not specify any supported accept media type.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.InvalidAcceptHeaderValue">
            <summary>
            The request did not specify any supported accept media type.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Server.MultiPartPreflightRequired">
            <summary>
            Multi-part requests must include a GraphQL preflight header.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.MiddlewareOrderInvalid">
            <summary>
            The middleware order of a field pipeline is incorrect.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.NoSchemaTypesAllowedAsRuntimeType">
            <summary>
            Type system members are not supported as runtime types.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.NodeResolverMissing">
            <summary>
            An object type implementing the node interface does not provide a node resolver.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.MutationPayloadMustBeObject">
            <summary>
            A mutation payload type must be an object type.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.MutationConventionDirectiveWrongLocation">
            <summary>
            The schema building directive `@mutation`
            can only be applied on object fields.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.DirectiveArgumentUnexpectedValue">
            <summary>
            A schema building directive had an argument with an unexpected value.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Schema.UnknownDirectiveArgument">
            <summary>
            The specified directive argument does not exist.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Scalars.InvalidRuntimeType">
            <summary>
            The runtime type is not supported by the scalars ParseValue method.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Scalars.InvalidSyntaxFormat">
            <summary>
            Either the syntax node is invalid when parsing the literal or the syntax
            node value has an invalid format.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Spatial.UnknownCrs">
            <summary>
            The coordinate reference system is not supported by this server
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Spatial.CoordinateMNotSupported">
            <summary>
            Coordinates with M values cannot be reprojected
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Data.NodeFieldWasNotFound">
            <summary>
            Type does not contain a valid node field. Only `items` and `nodes` are supported
            </summary>
        </member>
        <member name="T:HotChocolate.ErrorCodes.Validation">
            <summary>
            Error codes relating to the document validation.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Validation.IntrospectionNotAllowed">
            <summary>
            The introspection is not allowed for the current request
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Validation.MaxIntrospectionDepthOverflow">
            <summary>
            The maximum allowed introspection depth was exceeded.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Validation.MaxCoordinateCycleDepthOverflow">
            <summary>
            The maximum allowed coordinate cycle depth was exceeded.
            </summary>
        </member>
        <member name="T:HotChocolate.ErrorCodes.Paging">
            <summary>
            Error codes related to paging components
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.NodeTypeUnknown">
            <summary>
            Unable to infer the element type from the current resolver.
            This often happens if the resolver is not an iterable type like
            IEnumerable, IQueryable, IList etc. Ensure that you either
            explicitly specify the element type or that the return type of your resolver
            is an iterable type.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.SchemaTypeInvalid">
            <summary>
            The element schema type for pagination must be a valid GraphQL output type
            (ObjectType, InterfaceType, UnionType, EnumType, ScalarType).
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.MaxPaginationItems">
            <summary>
            The maximum allowed items per page were exceeded.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.NoPagingBoundaries">
            <summary>
            You must provide a `first` or `last` value to properly paginate the connection.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.MinPaginationItems">
            <summary>
            The requested number of values per page must be at least 0.
            </summary>
        </member>
        <member name="F:HotChocolate.ErrorCodes.Paging.InvalidCursor">
            <summary>
            The cursor format is invalid.
            </summary>
        </member>
        <member name="T:HotChocolate.Executable">
            <summary>
            Provides utility methods to create executable data sources.
            </summary>
        </member>
        <member name="M:HotChocolate.Executable.From``1(System.Linq.IQueryable{``0},System.Func{System.Linq.IQueryable{``0},System.String})">
            <summary>
            Creates a new executable from a queryable.
            </summary>
            <param name="source">
            The queryable that represents a not yet executed query.
            </param>
            <param name="queryPrinter">
            A delegate that can be used to print the query.
            </param>
            <typeparam name="T">
            The type of the elements that are returned by the query.
            </typeparam>
            <returns>
            Returns a new executable.
            </returns>
        </member>
        <member name="M:HotChocolate.Executable.From(System.Collections.IEnumerable)">
            <summary>
            Creates a new executable from an enumerable.
            </summary>
            <param name="source">
            The enumerable.
            </param>
            <returns>
            Returns a new executable.
            </returns>
        </member>
        <member name="M:HotChocolate.Executable.From``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Creates a new executable from an async enumerable.
            </summary>
            <param name="source">
            The async enumerable that is not yet executed.
            </param>
            <typeparam name="T">
            The type of the elements that are returned by the async enumerable.
            </typeparam>
            <returns>
            Returns a new executable.
            </returns>
        </member>
        <member name="T:HotChocolate.Executable`1">
            <summary>
            Represents a data source query that is not yet executed.
            </summary>
            <typeparam name="T">
            The type of the elements that are returned by the query.
            </typeparam>
        </member>
        <member name="P:HotChocolate.Executable`1.Source">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.ToListAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.CountAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.Print">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Executable`1.ToAsyncEnumerable(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.CleanupExecutionResultExtensions">
            <summary>
            Helper methods for <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.RegisterForCleanup(HotChocolate.Execution.IExecutionResult,System.Action)">
            <summary>
            Registers a cleanup task for execution resources bound to this execution result.
            </summary>
            <param name="result">
            The <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </param>
            <param name="clean">
            A cleanup task that will be executed when this result is disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.RegisterForCleanup(HotChocolate.Execution.IExecutionResult,System.IDisposable)">
            <summary>
            Registers a resource that needs to be disposed when the result is being disposed.
            </summary>
            <param name="result">
            The <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </param>
            <param name="disposable">
            The resource that needs to be disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.RegisterForCleanup(HotChocolate.Execution.IExecutionResult,System.IAsyncDisposable)">
            <summary>
            Registers a resource that needs to be disposed when the result is being disposed.
            </summary>
            <param name="result">
            The <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </param>
            <param name="disposable">
            The resource that needs to be disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.IsStreamResult(HotChocolate.Execution.IExecutionResult)">
            <summary>
            Defines if the specified <paramref name="result"/> is a response stream.
            </summary>
            <param name="result">
            The <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </param>
            <returns>
            A boolean that specifies if the <paramref name="result"/> is a response stream.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.ExpectOperationResult(HotChocolate.Execution.IExecutionResult)">
            <summary>
            Expects a single GraphQL operation result.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.ExpectOperationResultBatch(HotChocolate.Execution.IExecutionResult)">
            <summary>
            Expects a batch of operation results.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.CleanupExecutionResultExtensions.ExpectResponseStream(HotChocolate.Execution.IExecutionResult)">
            <summary>
            Expect a stream result.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.DefaultTimeProvider">
            <summary>
            Represents a default time provider.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.DefaultTimeProvider.UtcNow">
            <summary>
            Gets the current time in UTC.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionResult">
            <summary>
            A base-class for execution results that implements the dispose handling.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.ExecutionResult.Kind">
            <inheritdoc cref="T:HotChocolate.Execution.IExecutionResult" />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionResult.ContextData">
            <inheritdoc cref="T:HotChocolate.Execution.IExecutionResult" />
        </member>
        <member name="M:HotChocolate.Execution.ExecutionResult.RegisterForCleanup(System.Func{System.Threading.Tasks.ValueTask})">
            <inheritdoc cref="T:HotChocolate.Execution.IExecutionResult" />
        </member>
        <member name="M:HotChocolate.Execution.ExecutionResult.EnsureNotDisposed">
            <summary>
            Will throw an <see cref="T:System.ObjectDisposedException"/> if the result is already disposed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.ExecutionResult.DisposeAsync">
            <inheritdoc cref="T:System.IAsyncDisposable"/>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionResultKind">
            <summary>
            Specifies the kind of execution result.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionResultKind.SingleResult">
            <summary>
            A single result.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionResultKind.DeferredResult">
            <summary>
            A deferred response stream.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionResultKind.BatchResult">
            <summary>
            A batch response stream.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionResultKind.SubscriptionResult">
            <summary>
            A subscription response stream.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionResultKind.WarmupResult">
            <summary>
            A no-op result for warmup requests.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionStrategy">
            <summary>
            Represents the execution strategies.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionStrategy.Serial">
            <summary>
            Defines that a task or execution step has to be executed serial.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionStrategy.Parallel">
            <summary>
            Defines that a task or execution step can be executed in parallel.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.GraphQLRequestFlags">
            <summary>
            The GraphQL request flags allow to limit the GraphQL executor.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowQuery">
            <summary>
            Query operations are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowMutation">
            <summary>
            Mutation operations are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowSubscription">
            <summary>
            Subscription operations are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowStreams">
            <summary>
            Stream results are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowLegacy">
            <summary>
            Queries, mutations and stream results are allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.GraphQLRequestFlags.AllowAll">
            <summary>
            Everything is allowed.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionRequest.ContextData">
            <summary>
            Gets the initial request state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionRequest.Services">
            <summary>
            Gets the services that shall be used while executing the GraphQL request.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IExecutionResult">
            <summary>
            Represents the result of the GraphQL execution pipeline.
            </summary>
            <remarks>
            Execution results are by default disposable and disposing
            them allows it to give back its used memory to the execution
            engine result pools.
            </remarks>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionResult.Kind">
            <summary>
            Gets the result kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionResult.ContextData">
            <summary>
            Gets the result context data which represent additional
            properties that are NOT written to the transport.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionResult.RegisterForCleanup(System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Registers a cleanup task for execution resources bound to this execution result.
            </summary>
            <param name="clean">
            A cleanup task that will be executed when this result is disposed.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.IExecutionResultFormatter">
            <summary>
            Represents a formatter for <see cref="T:HotChocolate.Execution.IExecutionResult"/>s.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionResultFormatter.FormatAsync(HotChocolate.Execution.IExecutionResult,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Formats a execution result and writes the formatted result to
            the given <paramref name="outputStream"/>.
            </summary>
            <param name="result">
            The execution result that shall be formatted.
            </param>
            <param name="outputStream">
            The stream to which the formatted <paramref name="result"/> shall be written to.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            <paramref name="outputStream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.Execution.IExecutionTaskDefinition">
            <summary>
            The execution task definition represents one kind of execution task.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskDefinition.Create(HotChocolate.Execution.IExecutionTaskContext)">
            <summary>
            Creates a new execution task from this definition.
            </summary>
            <param name="context">
            The execution task context.
            </param>
            <returns>
            Returns a new execution task.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.IOperationDocument">
            <summary>
            Represents a GraphQL operation document.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocument.WriteToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the current document to the output stream.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocument.AsSpan">
            <summary>
            Returns the binary document representation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocument.ToArray">
            <summary>
            Returns the binary document representation.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocument.ToString">
            <summary>
            Returns the document string representation.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IOperationDocumentStorage">
            <summary>
            Represents a storage for operation documents.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocumentStorage.TryReadAsync(HotChocolate.Execution.OperationDocumentId,System.Threading.CancellationToken)">
            <summary>
            Tries to read an operation document from the storage.
            If the document does not exist <c>null</c> is returned.
            </summary>
            <param name="documentId">
            The id of the document to read.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the operation document or <c>null</c> if the document does not exist.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.IOperationDocumentStorage.SaveAsync(HotChocolate.Execution.OperationDocumentId,HotChocolate.Execution.IOperationDocument,System.Threading.CancellationToken)">
            <summary>
            Saves an operation document to the storage.
            </summary>
            <param name="documentId">
            The id of the document to save.
            </param>
            <param name="document">
            The document to save.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.IOperationRequest">
            <summary>
            Defines the basic properties fro a GraphQL operation request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.Document">
            <summary>
            Gets the GraphQL request document.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.DocumentId">
            <summary>
            Gets the GraphQL request document ID.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.DocumentHash">
            <summary>
            Gets GraphQL request document hash.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.OperationName">
            <summary>
            A name of an operation in the GraphQL request document that shall be executed;
            or, <c>null</c> if the document only contains a single operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.Extensions">
            <summary>
            Gets the GraphQL request extension data.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationRequest.Flags">
            <summary>
            GraphQL request flags allow to limit the GraphQL executor capabilities.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IOperationResult">
            <summary>
            Represents a query result object.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.RequestIndex">
            <summary>
            Gets the index of the request that corresponds to this result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.VariableIndex">
            <summary>
            Gets the index of of the variable set that corresponds to this result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Label">
            <summary>
            A string that was passed to the label argument of the @defer or @stream
            directive that corresponds to this results.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Path">
            <summary>
             A path to the insertion point that informs the client how to patch a
            subsequent delta payload into the original payload.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Data">
            <summary>
            The data that is being delivered.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Items">
            <summary>
            The `items` entry in a stream payload is a list of results from the execution of
            the associated @stream directive. This output will be a list of the same type of
            the field with the associated `@stream` directive. If `items` is set to `null`,
            it indicates that an error has caused a `null` to bubble up to a field higher
            than the list field with the associated `@stream` directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Errors">
            <summary>
            Gets the GraphQL errors of the result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Extensions">
            <summary>
            Gets the additional information that are passed along
            with the result and will be serialized for transport.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.Incremental">
            <summary>
            Gets the incremental patches provided with this result.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.HasNext">
            <summary>
            A boolean that is present and <c>true</c> when there are more payloads
            that will be sent for this operation. The last payload in a multi payload response
            should return HasNext: <c>false</c>.
            HasNext is null for single-payload responses to preserve backwards compatibility.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Execution.IOperationResult.IsDataSet">
            <summary>
            Specifies if data was explicitly set.
            If <c>false</c> the data was not set (including null).
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationResult.ToDictionary">
            <summary>
            Serializes this GraphQL result into a dictionary.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IOperationResultFormatter">
            <summary>
            Represents a formatter for <see cref="T:HotChocolate.Execution.IOperationResult"/>s.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IOperationResultFormatter.FormatAsync(HotChocolate.Execution.IOperationResult,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Formats a query result and writes the formatted result to
            the given <paramref name="outputStream"/>.
            </summary>
            <param name="result">
            The query result that shall be formatted.
            </param>
            <param name="outputStream">
            The stream to which the formatted <paramref name="result"/> shall be written to.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            <paramref name="outputStream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.IOperationResultFormatter.Format(HotChocolate.Execution.IOperationResult,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Formats a query result and writes the formatted result to
            the given <paramref name="writer"/>.
            </summary>
            <param name="result">
            The query result that shall be formatted.
            </param>
            <param name="writer">
            The writer to which the formatted <paramref name="result"/> shall be written to.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            <paramref name="writer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.Execution.IResolverResultPostProcessor">
            <summary>
            <para>
            The result post processor allows to post process the result of the resolver pipeline
            before the value goes through the GraphQL value completion.
            </para>
            <para>
            This is useful if you want to complete IO operations like reading the content of a file streams
            into memory so that it can go through the value completion or other async operations.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IResolverResultPostProcessor.ToCompletionResultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Post processes the result so that it can be completed by the GraphQL value completion.
            </summary>
            <param name="result">
            The result of the resolver pipeline.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns the processed result.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.IResolverResultPostProcessor.ToStreamResultAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Post processes the result to an async enumerable that can be used to stream the result.
            </summary>
            <param name="result">
            The result of the resolver pipeline.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns an IAsyncEnumerable that represents the result stream.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.IResponseStream">
            <summary>
            The response stream represents a stream of <see cref="T:HotChocolate.Execution.IOperationResult" /> that are produced
            by the execution engine.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IResponseStream.ReadResultsAsync">
            <summary>
            Reads the subscription results from the execution engine.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IResponseStreamFormatter">
            <summary>
            Represents a formatter for <see cref="T:HotChocolate.Execution.IResponseStream"/>s.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IResponseStreamFormatter.FormatAsync(HotChocolate.Execution.IResponseStream,System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Formats the results from the response stream and
            writes them to the <paramref name="outputStream"/>.
            </summary>
            <param name="responseStream">
            The GraphQL response stream.
            </param>
            <param name="outputStream">
            The output stream to which the formatter results shall be written to.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.ISourceStream">
            <summary>
            The source stream represents a stream of events from a pub/sub system.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.ISourceStream.ReadEventsAsync">
            <summary>
            Reads the subscription result from the pub/sub system.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ISourceStream`1">
            <summary>
            The source stream represents a stream of events from a pub/sub system.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.ISourceStream`1.ReadEventsAsync">
            <summary>
            Reads the subscription result from the pub/sub system.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ITimeProvider">
            <summary>
            Represents a time provider abstraction.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.ITimeProvider.UtcNow">
            <summary>
            Gets the current time in UTC.
            </summary>
            <returns>
            Returns the current time in UTC.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.IVariableValueCollection">
            <summary>
            Represents a collection of coerced variables.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IVariableValueCollection.GetVariable``1(System.String)">
            <summary>
            Gets a coerced variable value from the collection.
            </summary>
            <param name="name">The variable name.</param>
            <returns></returns>
            <exception cref="T:HotChocolate.GraphQLException">
            A GraphQL execution error is thrown when the
            requested variable cannot be found or cannot
            be converted to the request type.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="name" /> mustn't be null or
            <see cref="F:System.String.Empty" />.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.IVariableValueCollection.TryGetVariable``1(System.String,``0@)">
            <summary>
            Tries to get a coerced variable value from the collection.
            </summary>
            <param name="name">The variable name.</param>
            <param name="value">The coerced variable value.</param>
            <returns>
            <c>true</c> if a coerced variable exists and can be converted
            to the requested type; otherwise, <c>false</c> will be returned.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.ListPostProcessor`1">
            <summary>
            A post processor that can be used to post process async list
            results like async enumerables, queryables or executables.
            </summary>
            <typeparam name="T">
            The type of the elements in the list.
            </typeparam>
        </member>
        <member name="T:HotChocolate.Execution.OperationDocument">
            <summary>
            Represents an already parsed GraphQL operation document.
            </summary>
            <param name="document">
            The parsed GraphQL operation document.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocument.#ctor(HotChocolate.Language.DocumentNode)">
            <summary>
            Represents an already parsed GraphQL operation document.
            </summary>
            <param name="document">
            The parsed GraphQL operation document.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.OperationDocument.Document">
            <summary>
            Gets the parsed GraphQL operation document.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocument.WriteToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the current document to the output stream.
            </summary>
            <param name="output">
            The output stream to which the document is written.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="output"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocument.AsSpan">
            <summary>
            Returns the binary document representation.
            </summary>
            <returns>
            Returns the binary document representation.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocument.ToArray">
            <summary>
            Returns the binary document representation.
            </summary>
            <returns>
            Returns the binary document representation.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocument.ToString">
            <summary>
            Returns the document string representation.
            </summary>
            <returns>
            Returns the document string representation.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationDocumentId">
            <summary>
            Represents a valid identifier for a GraphQL operation document.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="value">
            The GraphQL operation document id.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.OperationDocumentId.IsEmpty">
            <summary>
            Gets a value indicating whether the GraphQL operation document id is empty.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationDocumentId.Value">
            <summary>
            Gets the GraphQL operation document id.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.Equals(HotChocolate.Execution.OperationDocumentId)">
            <summary>
            Determines whether the specified <paramref name="other"/>
            is equal to the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to compare with the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="other"/> is equal to the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.Equals(System.Object)">
            <summary>
            Determines whether the specified <paramref name="obj"/>
            is equal to the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="obj"/> is equal to the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.op_Equality(HotChocolate.Execution.OperationDocumentId,HotChocolate.Execution.OperationDocumentId)">
            <summary>
            Determines whether the specified <paramref name="left"/> is equal to the specified <paramref name="right"/>.
            </summary>
            <param name="left">
            The first <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to compare.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="left"/> is equal to the specified <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.op_Inequality(HotChocolate.Execution.OperationDocumentId,HotChocolate.Execution.OperationDocumentId)">
            <summary>
            Determines whether the specified <paramref name="left"/> is not equal to the specified <paramref name="right"/>.
            </summary>
            <param name="left">
            The first <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to compare.
            </param>
            <param name="right">
            The second <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to compare.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="left"/> is not equal to the specified <paramref name="right"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.op_Implicit(System.String)~System.Nullable{HotChocolate.Execution.OperationDocumentId}">
            <summary>
            Implicitly converts the specified <paramref name="value"/> to a <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="value">
            The GraphQL operation document id string representation.
            </param>
            <returns>
            A new instance of <see cref="T:HotChocolate.Execution.OperationDocumentId"/> representing the specified <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.EnsureValidId(System.String)">
            <summary>
            Ensures that the specified GraphQL operation document id is valid.
            </summary>
            <param name="operationId">
            The GraphQL operation document id.
            </param>
            <exception cref="T:System.ArgumentException">
            The specified GraphQL operation document id is invalid.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.IsValidId(System.String)">
            <summary>
            Determines whether the specified <paramref name="operationId"/>
            string is valid input for an <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="operationId">
            The GraphQL operation document id.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="operationId"/> is valid;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.IsNullOrEmpty(System.Nullable{HotChocolate.Execution.OperationDocumentId})">
            <summary>
            Determines whether the specified <paramref name="id"/> is <c>null</c> or empty.
            </summary>
            <param name="id">
            The <see cref="T:HotChocolate.Execution.OperationDocumentId"/> to check.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="id"/> is <c>null</c> or empty;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentId.TryParse(System.String,HotChocolate.Execution.OperationDocumentId@)">
            <summary>
            Tries to parse the specified <paramref name="value"/> to a <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </summary>
            <param name="value">
            The GraphQL operation document id string representation.
            </param>
            <param name="id">
            The parsed <see cref="T:HotChocolate.Execution.OperationDocumentId"/>.
            </param>
            <returns>
            <c>true</c> if the specified <paramref name="value"/> could be parsed to a <see cref="T:HotChocolate.Execution.OperationDocumentId"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationDocumentSourceText">
            <summary>
            Represents a GraphQL operation document source texts that needs parsing before it can be executed.
            </summary>
            <param name="sourceText"></param>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentSourceText.#ctor(System.String)">
            <summary>
            Represents a GraphQL operation document source texts that needs parsing before it can be executed.
            </summary>
            <param name="sourceText"></param>
        </member>
        <member name="P:HotChocolate.Execution.OperationDocumentSourceText.SourceText">
            <summary>
            Gets the GraphQL operation document source text.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentSourceText.WriteToAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Writes the current document to the output stream.
            </summary>
            <param name="output">
            The output stream to which the document is written.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="output"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentSourceText.AsSpan">
            <summary>
            Returns the binary document representation.
            </summary>
            <returns>
            Returns the binary document representation.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationDocumentSourceText.ToString">
            <summary>
            Returns the document string representation.
            </summary>
            <returns>
            Returns the document string representation.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationRequest">
            <summary>
            Defines the standard GraphQL request.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.#ctor(HotChocolate.Execution.IOperationDocument,System.Nullable{HotChocolate.Execution.OperationDocumentId},System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider,HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Execution.OperationRequest" /> class.
            </summary>
            <param name="document">
            A GraphQL request document.
            </param>
            <param name="documentId">
            A GraphQL request document ID.
            </param>
            <param name="documentHash">
            A GraphQL request document hash.
            </param>
            <param name="operationName">
            A name of an operation in the GraphQL request document that shall be executed;
            </param>
            <param name="variableValues">
            The variable values for the GraphQL request.
            </param>
            <param name="extensions">
            The GraphQL request extension data.
            </param>
            <param name="contextData">
            The initial global request state.
            </param>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
            <param name="flags">
            The GraphQL request flags can be used to limit the execution engine capabilities.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="document"/> and <paramref name="documentId"/> are both null.
            </exception>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.Document">
            <summary>
            Gets the GraphQL request document.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.DocumentId">
            <summary>
            Gets the GraphQL request document ID.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.DocumentHash">
            <summary>
            Gets GraphQL request document hash.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.OperationName">
            <summary>
            A name of an operation in the GraphQL request document that shall be executed;
            or, <c>null</c> if the document only contains a single operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.VariableValues">
            <summary>
            Gets the variable values for the GraphQL request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.Extensions">
            <summary>
            Gets the GraphQL request extension data.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.ContextData">
            <summary>
            Gets the initial request state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.Services">
            <summary>
            Gets the services that shall be used while executing the GraphQL request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequest.Flags">
            <summary>
            GraphQL request flags allow to limit the GraphQL executor capabilities.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithDocument(HotChocolate.Execution.IOperationDocument)">
            <summary>
            Creates a new request with the specified document.
            </summary>
            <param name="document">
            The GraphQL request document.
            </param>
            <returns>
            Returns a new request with the specified document.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithDocumentId(HotChocolate.Execution.OperationDocumentId)">
            <summary>
            Creates a new request with the specified document ID.
            </summary>
            <param name="documentId">
            The ID of the persisted operation document.
            </param>
            <returns>
            Returns a new request with the specified document ID.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithDocumentHash(System.String)">
            <summary>
            Creates a new request with the specified document hash.
            </summary>
            <param name="documentHash">
            The hash of the persisted operation document.
            </param>
            <returns>
            Returns a new request with the specified document hash.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithOperationName(System.String)">
            <summary>
            Creates a new request with the specified operation name.
            </summary>
            <param name="operationName">
            The name of the operation that shall be executed.
            </param>
            <returns>
            Returns a new request with the specified operation name.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithVariableValues(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new request with the specified variable values.
            </summary>
            <param name="variableValues">
            The variable values that shall be used while executing the operation.
            </param>
            <returns>
            Returns a new request with the specified variable values.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithExtensions(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new request with the specified extensions.
            </summary>
            <param name="extensions">
            The extensions that shall be used while executing the operation.
            </param>
            <returns>
            Returns a new request with the specified extensions.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithContextData(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new request with the specified context data.
            </summary>
            <param name="contextData">
            The context data that shall be used while executing the operation.
            </param>
            <returns>
            Returns a new request with the specified context data.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithServices(System.IServiceProvider)">
            <summary>
            Creates a new request with the specified services.
            </summary>
            <param name="services">
            The services that shall be used while executing the operation.
            </param>
            <returns>
            Returns a new request with the specified services.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.WithFlags(HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Creates a new request with the specified flags.
            </summary>
            <param name="flags">
            The request flags.
            </param>
            <returns>
            Returns a new request with the specified flags.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.FromId(HotChocolate.Execution.OperationDocumentId,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider,HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Creates a persisted operation request.
            </summary>
            <param name="documentId">
            The ID of the persisted operation document.
            </param>
            <param name="documentHash">
            The hash of the persisted operation document.
            </param>
            <param name="operationName">
            The name of the operation that shall be executed.
            </param>
            <param name="variableValues">
            The variable values for the operation.
            </param>
            <param name="extensions">
            The extensions for the operation.
            </param>
            <param name="contextData">
            The context data for the operation.
            </param>
            <param name="services">
            The services that shall be used while executing the operation.
            </param>
            <param name="flags">
            The request flags.
            </param>
            <returns>
            Returns a new persisted operation request.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="documentId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.FromId(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider,HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Creates a persisted operation request.
            </summary>
            <param name="documentId">
            The ID of the persisted operation document.
            </param>
            <param name="documentHash">
            The hash of the persisted operation document.
            </param>
            <param name="operationName">
            The name of the operation that shall be executed.
            </param>
            <param name="variableValues">
            The variable values for the operation.
            </param>
            <param name="extensions">
            The extensions for the operation.
            </param>
            <param name="contextData">
            The context data for the operation.
            </param>
            <param name="services">
            The services that shall be used while executing the operation.
            </param>
            <param name="flags">
            The request flags.
            </param>
            <returns>
            Returns a new persisted operation request.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="documentId"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequest.FromSourceText(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider,HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Creates a GraphQL request from a operation document source text.
            </summary>
            <param name="sourceText">
            The GraphQL operation document source text.
            </param>
            <param name="documentHash">
            The hash of the persisted operation document.
            </param>
            <param name="operationName">
            The name of the operation that shall be executed.
            </param>
            <param name="variableValues">
            The variable values for the operation.
            </param>
            <param name="extensions">
            The extensions for the operation.
            </param>
            <param name="contextData">
            The context data for the operation.
            </param>
            <param name="services">
            The services that shall be used while executing the operation.
            </param>
            <param name="flags">
            The request flags.
            </param>
            <returns>
            Returns a new persisted operation request.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationRequestBatch">
            <summary>
            Represents a batch of GraphQL requests that shall be executed together.
            </summary>
            <param name="requests">
            The requests within this batch.
            </param>
            <param name="contextData">
            The initial request state.
            </param>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBatch.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IOperationRequest},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider)">
            <summary>
            Represents a batch of GraphQL requests that shall be executed together.
            </summary>
            <param name="requests">
            The requests within this batch.
            </param>
            <param name="contextData">
            The initial request state.
            </param>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequestBatch.Requests">
            <summary>
            The requests within this batch.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequestBatch.ContextData">
            <summary>
            Gets the initial request state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationRequestBatch.Services">
            <summary>
            Gets the services that shall be used while executing the GraphQL request.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetDocument(System.String)">
            <summary>
            Sets the GraphQL operation document that shall be executed.
            </summary>
            <param name="sourceText">
            The GraphQL operation document source text.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="sourceText"/> is <c>null</c> or empty.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetDocument(HotChocolate.Language.DocumentNode)">
            <summary>
            Sets the GraphQL operation document that shall be executed.
            </summary>
            <param name="document">
            The parsed GraphQL operation document.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="document"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetDocumentId(System.Nullable{HotChocolate.Execution.OperationDocumentId})">
            <summary>
            Sets the GraphQL operation document id.
            </summary>
            <param name="documentId">
            The GraphQL operation document id.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetDocumentHash(System.String)">
            <summary>
            Sets the hash of the GraphQL operation document.
            </summary>
            <param name="documentHash"></param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetOperationName(System.String)">
            <summary>
            Sets the name of the operation in the GraphQL request document that shall be executed.
            </summary>
            <param name="operationName">
            The name of the GraphQL operation within the GraphQL operation document.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.AddVariableValues(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the variable values for the GraphQL request.
            </summary>
            <param name="variableValues">
            The variable values for the GraphQL request.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetVariableValues(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the variable values for the GraphQL request.
            </summary>
            <param name="variableValues">
            The variable values for the GraphQL request.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetVariableValuesSet(System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}})">
            <summary>
            Sets the variable values for the GraphQL request.
            </summary>
            <param name="variableValues">
            The variable values for the GraphQL request.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetExtensions(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the GraphQL request extension data.
            </summary>
            <param name="extensions">
            The GraphQL request extension data.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetGlobalState(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the initial global request state.
            </summary>
            <param name="contextData">
            The initial global request state.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetGlobalState(System.String,System.Object)">
            <summary>
            Sets the initial global request state.
            </summary>
            <param name="name">
            The name of the global state.
            </param>
            <param name="value">
            The value of the global state.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.AddGlobalState(System.String,System.Object)">
            <summary>
            Adds a global state to the initial global request state.
            </summary>
            <param name="name">
            The name of the global state.
            </param>
            <param name="value">
            The value of the global state.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.TryAddGlobalState(System.String,System.Object)">
            <summary>
            Tries to add a global state to the initial global request state.
            </summary>
            <param name="name">
            The name of the global state.
            </param>
            <param name="value">
            The value of the global state.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.RemoveGlobalState(System.String)">
            <summary>
            Removes a global state from the initial global request state.
            </summary>
            <param name="name">
            The name of the global state.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetServices(System.IServiceProvider)">
            <summary>
            Sets the initial global request state.
            </summary>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.TrySetServices(System.IServiceProvider)">
            <summary>
            Tries to set the initial global request state.
            </summary>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.SetFlags(HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Sets the GraphQL request flags can be used to limit the execution engine capabilities.
            </summary>
            <param name="flags">
            The GraphQL request flags can be used to limit the execution engine capabilities.
            </param>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.Reset">
            <summary>
            Resets the builder to its initial state.
            </summary>
            <returns>
            Returns this instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> for configuration chaining.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.Build">
            <summary>
            Builds the operation request.
            </summary>
            <returns>
            Returns the operation request.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.New">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.From(HotChocolate.Execution.IOperationRequest)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> from an existing request.
            </summary>
            <param name="request">
            The existing request from which the new builder is created.
            </param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">
            The request type is not supported.
            </exception>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilder.From(HotChocolate.Language.GraphQLRequest)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" /> from an existing request.
            </summary>
            <param name="request">
            The existing request from which the new builder is created.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.Execution.OperationRequestBuilder" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationRequestBuilderExtensions">
            <summary>
            Extensions methods for <see cref="T:HotChocolate.Execution.OperationRequestBuilder"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.AllowIntrospection(HotChocolate.Execution.OperationRequestBuilder)">
            <summary>
            Allows introspection usage in the current request.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.SetIntrospectionNotAllowedMessage(HotChocolate.Execution.OperationRequestBuilder,System.String)">
            <summary>
            Sets the error message for when the introspection is not allowed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.SetIntrospectionNotAllowedMessage(HotChocolate.Execution.OperationRequestBuilder,System.Func{System.String})">
            <summary>
            Sets the error message for when the introspection is not allowed.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.AllowNonPersistedOperation(HotChocolate.Execution.OperationRequestBuilder)">
            <summary>
            Marks the current request to allow non-persisted operations.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.SkipExecutionDepthAnalysis(HotChocolate.Execution.OperationRequestBuilder)">
            <summary>
            Skips the request execution depth analysis.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.SetMaximumAllowedExecutionDepth(HotChocolate.Execution.OperationRequestBuilder,System.Int32)">
            <summary>
            Set allowed execution depth for this request and override the
            global allowed execution depth.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.SetUser(HotChocolate.Execution.OperationRequestBuilder,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Sets the user for this request.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationRequestBuilderExtensions.MarkAsWarmupRequest(HotChocolate.Execution.OperationRequestBuilder)">
            <summary>
            Marks this request as a warmup request that will bypass security measures and skip execution.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.OperationResult">
            <summary>
            Represents a operation result object.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationResult.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.IError},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IOperationResult},System.String,HotChocolate.Path,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new <see cref="T:HotChocolate.Execution.OperationResult"/>.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.RequestIndex">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.VariableIndex">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Label">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Path">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Data">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Items">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Errors">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Extensions">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.Incremental">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.ContextData">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.HasNext">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.OperationResult.IsDataSet">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.OperationResult.WithExtensions(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:HotChocolate.Execution.OperationResult"/> with the specified extension data.
            </summary>
            <param name="extensions">
            The extension data that shall be added to the result.
            </param>
            <returns>
            Returns a new <see cref="T:HotChocolate.Execution.OperationResult"/> that represents the result.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationResult.WithContextData(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:HotChocolate.Execution.OperationResult"/> with the specified context data.
            </summary>
            <param name="contextData">
            The context data that shall be added to the result.
            </param>
            <returns>
            Returns a new <see cref="T:HotChocolate.Execution.OperationResult"/> that represents the result.
            </returns>
        </member>
        <member name="M:HotChocolate.Execution.OperationResult.ToDictionary">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Execution.OperationResultBatch">
            <summary>
            Represents a batch of operation results.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationResultBatch.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IExecutionResult},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Execution.OperationResultBatch"/>.
            </summary>
            <param name="results">
            The results of this batch.
            </param>
            <param name="contextData">
            The result context data which represent additional properties that are NOT written to the transport.
            </param>
            <exception cref="T:System.ArgumentException">
            The result must be either an operation result or a response stream.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="results"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.Execution.OperationResultBatch.Kind">
            <summary>
            Gets the result kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationResultBatch.Results">
            <summary>
            Gets the results of this batch.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.OperationResultBatch.ContextData">
            <summary>
            Gets the result context data which represent additional
            properties that are NOT written to the transport.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationResultBatch.WithResults(System.Collections.Generic.IReadOnlyList{HotChocolate.Execution.IExecutionResult})">
            <summary>
            Creates a new <see cref="T:HotChocolate.Execution.OperationResultBatch"/> with the specified results.
            </summary>
            <param name="results">
            The results of this batch.
            </param>
            <returns>
            Returns a new <see cref="T:HotChocolate.Execution.OperationResultBatch"/> with the specified results.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.OperationResultBuilderExtensions">
            <summary>
            Extensions methods for <see cref="T:HotChocolate.Execution.OperationRequestBuilder"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.OperationResultBuilderExtensions.RegisterForCleanup(HotChocolate.Execution.OperationResultBuilder,System.Action)">
            <summary>
            Registers a cleanup task for execution resources with the <see cref="T:HotChocolate.Execution.OperationResultBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.OperationResultBuilder"/>.
            </param>
            <param name="clean">
            A cleanup task that will be executed when this result is disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.OperationResultBuilderExtensions.RegisterForCleanup(HotChocolate.Execution.OperationResultBuilder,System.IDisposable)">
            <summary>
            Registers a cleanup task for execution resources with the <see cref="T:HotChocolate.Execution.OperationResultBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.OperationResultBuilder"/>.
            </param>
            <param name="disposable">
            The resource that needs to be disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.OperationResultBuilderExtensions.RegisterForCleanup(HotChocolate.Execution.OperationResultBuilder,System.IAsyncDisposable)">
            <summary>
            Registers a cleanup task for execution resources with the <see cref="T:HotChocolate.Execution.OperationResultBuilder"/>.
            </summary>
            <param name="builder">
            The <see cref="T:HotChocolate.Execution.IExecutionResult"/>.
            </param>
            <param name="disposable">
            The resource that needs to be disposed.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.ResponseStream.WithOnFirstResult(System.Collections.Generic.IReadOnlyList{System.Func{HotChocolate.Execution.IOperationResult,HotChocolate.Execution.IOperationResult}})">
            <summary>
            Creates a new response stream with a list of mutators that are applied to the first result of this stream.
            </summary>
            <param name="onFirstResult">
            The mutators that are applied to the first result of this stream.
            </param>
            <returns>
            Returns a new response stream with the specified mutators.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionTask">
            <summary>
            Provides the base implementation for a executable task.
            </summary>
            <remarks>
            The task is by default a parallel execution task.
            </remarks>
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.Context">
            <summary>
            Gets the execution engine task context.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.Status">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.Next">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.Previous">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.State">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.IsSerial">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Execution.ExecutionTask.IsRegistered">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTask.BeginExecute(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTask.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            This execute method represents the work of this task.
            </summary>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTask.Faulted">
            <summary>
            Completes the task as faulted.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTask.Reset">
            <summary>
            Resets the state of this task in case the task object is reused.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionTaskExtensions">
            <summary>
            Extensions for <see cref="T:HotChocolate.Execution.IExecutionTask"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.ExecutionTaskExtensions.IsCompleted(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Defines if this task is completed.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionTaskKind">
            <summary>
            The execution task kind defines the task behavior during execution.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskKind.Parallel">
            <summary>
            Tasks that can be executed in parallel.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskKind.Serial">
            <summary>
            Tasks that need to be executed serially.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskKind.Pure">
            <summary>
            Tasks that have no side-effects and are synchronous.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.ExecutionTaskStatus">
            <summary>
            The execution task status.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskStatus.WaitingToRun">
            <summary>
            The task is initialized and waiting to run.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskStatus.Running">
            <summary>
            The task is running.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskStatus.Completed">
            <summary>
            The task is completed.
            </summary>
        </member>
        <member name="F:HotChocolate.Execution.ExecutionTaskStatus.Faulted">
            <summary>
            The task completed and is in a faulted state.
            </summary>
        </member>
        <member name="T:HotChocolate.Execution.IExecutionTask">
            <summary>
            This interface represents a task that can be executed by the execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.Kind">
            <summary>
            Defines the kind of task.
            The task kind is used to apply the correct execution strategy.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.Status">
            <summary>
            Specifies the status of this task.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.Next">
            <summary>
            Next and previous are properties that are used by the execution engine to
            track the execution state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.Previous">
            <summary>
            Next and previous are properties that are used by the execution engine to
            track the execution state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.State">
            <summary>
            This property is set by the execution engine and stores the execution state on it.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.IsSerial">
            <summary>
            This property is set by the execution engine defines if the task needs to be
            executed in a serial context.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.IExecutionTask.IsRegistered">
            <summary>
            Specifies if the task was fully registered with the scheduler.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTask.BeginExecute(System.Threading.CancellationToken)">
            <summary>
            Begins executing this task.
            </summary>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTask.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            The running task can be awaited to track completion of this particular task.
            </summary>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.IExecutionTaskContext">
            <summary>
            The execution task context can be used by an execution task to
            interact with the execution engine.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskContext.Track(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Tracks the running task for the diagnostics.
            </summary>
            <param name="task">The task that shall be tracked.</param>
            <returns>Returns a disposable representing the task activity scope.</returns>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskContext.Completed(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Signals to the execution engine that the task has finished.
            </summary>
            <param name="task">The task that has been completed.</param>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskContext.ReportError(HotChocolate.Execution.IExecutionTask,HotChocolate.IError)">
            <summary>
            Reports an error that happened during the task execution.
            </summary>
            <param name="task">
            The task that is reporting the error.
            </param>
            <param name="error">
            The GraphQL error.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskContext.ReportError(HotChocolate.Execution.IExecutionTask,System.Exception)">
            <summary>
            Reports an error that happened during the task execution.
            </summary>
            <param name="task">
            The task that is reporting the error.
            </param>
            <param name="exception">
            The exception that happened during execution.
            </param>
        </member>
        <member name="M:HotChocolate.Execution.IExecutionTaskContext.Register(HotChocolate.Execution.IExecutionTask)">
            <summary>
            Registers a new execution task.
            An execution task may register new execution tasks
            before it has hit <see cref="M:HotChocolate.Execution.IExecutionTaskContext.Completed(HotChocolate.Execution.IExecutionTask)"/>.
            </summary>
            <param name="task">
            The new execution task.
            </param>
        </member>
        <member name="T:HotChocolate.Execution.VariableBatchRequest">
            <summary>
            Defines a GraphQL operation request that shall be executed as many times as there are variable sets.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.VariableBatchRequest.#ctor(HotChocolate.Execution.IOperationDocument,System.Nullable{HotChocolate.Execution.OperationDocumentId},System.String,System.String,System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IServiceProvider,HotChocolate.Execution.GraphQLRequestFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Execution.VariableBatchRequest" /> class.
            </summary>
            <param name="document">
            A GraphQL request document.
            </param>
            <param name="documentId">
            A GraphQL request document ID.
            </param>
            <param name="documentHash">
            A GraphQL request document hash.
            </param>
            <param name="operationName">
            A name of an operation in the GraphQL request document that shall be executed.
            </param>
            <param name="variableValues">
            The list variable values for the GraphQL request.
            </param>
            <param name="extensions">
            The GraphQL request extension data.
            </param>
            <param name="contextData">
            The initial global request state.
            </param>
            <param name="services">
            The services that shall be used while executing the GraphQL request.
            </param>
            <param name="flags">
            The GraphQL request flags can be used to limit the execution engine capabilities.
            </param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="document"/> and <paramref name="documentId"/> are both null.
            </exception>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.Document">
            <summary>
            Gets the GraphQL request document.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.DocumentId">
            <summary>
            Gets the GraphQL request document ID.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.DocumentHash">
            <summary>
            Gets GraphQL request document hash.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.OperationName">
            <summary>
            A name of an operation in the GraphQL request document that shall be executed;
            or, <c>null</c> if the document only contains a single operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.VariableValues">
            <summary>
            Gets a list of variable values for the GraphQL request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.Extensions">
            <summary>
            Gets the GraphQL request extension data.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.ContextData">
            <summary>
            Gets the initial request state.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.Services">
            <summary>
            Gets the services that shall be used while executing the GraphQL request.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableBatchRequest.Flags">
            <summary>
            GraphQL request flags allow to limit the GraphQL executor capabilities.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.VariableBatchRequest.WithServices(System.IServiceProvider)">
            <summary>
            Creates a new request with the specified services.
            </summary>
            <param name="services">
            The services that shall be used while executing the operation.
            </param>
            <returns>
            Returns a new request with the specified services.
            </returns>
        </member>
        <member name="T:HotChocolate.Execution.VariableValue">
            <summary>
            Represents a variable value.
            </summary>
        </member>
        <member name="M:HotChocolate.Execution.VariableValue.#ctor(System.String,HotChocolate.Types.IInputType,HotChocolate.Language.IValueNode)">
            <summary>
            Represents a variable value.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableValue.Name">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableValue.Type">
            <summary>
            Gets the variable type.
            </summary>
        </member>
        <member name="P:HotChocolate.Execution.VariableValue.Value">
            <summary>
            Gets the variable value.
            </summary>
        </member>
        <member name="T:HotChocolate.FieldError">
            <summary>
            This class represents a mutation error and is mean to be used within mutation convention extensions.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldError.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.FieldError"/>.
            </summary>
            <param name="error">
            The error object.
            </param>
        </member>
        <member name="M:HotChocolate.FieldError.#ctor(System.Collections.Generic.IReadOnlyList{System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.FieldError"/>.
            </summary>
            <param name="errors">
            The error objects.
            </param>
        </member>
        <member name="P:HotChocolate.FieldError.Errors">
            <summary>
            Gets the error objects.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldError.HotChocolate#IFieldResult#Value">
            <summary>
            Gets the mutation result value.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldError.IsSuccess">
            <summary>
            Defines if the mutation was successful and if the result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldError.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="T:HotChocolate.FieldResult`1">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`1.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`1.#ctor(System.Object)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`1.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`1.#ctor(System.Object[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`1.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`1.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`1.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`1.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`1.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`1.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`1.op_Implicit(`0)~HotChocolate.FieldResult{`0}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`1.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.FieldResult`2">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
            <typeparam name="TError">
            The error type.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`2.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`2.#ctor(`1)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`2.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`2.#ctor(`1[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`2.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`2.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`2.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`2.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`2.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`2.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`2.op_Implicit(`0)~HotChocolate.FieldResult{`0,`1}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`2.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`2.op_Implicit(`1)~HotChocolate.FieldResult{`0,`1}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`2.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.FieldResult`3">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
            <typeparam name="TError1">
            The error type 1.
            </typeparam>
            <typeparam name="TError2">
            The error type 2.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(`1)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(`1[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(`2)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(`2[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.#ctor(System.Object[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`3.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`3.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`3.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`3.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`3.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`3.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`3.op_Implicit(`0)~HotChocolate.FieldResult{`0,`1,`2}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`3.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.op_Implicit(`1)~HotChocolate.FieldResult{`0,`1,`2}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError1"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`3.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`3.op_Implicit(`2)~HotChocolate.FieldResult{`0,`1,`2}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`3.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.FieldResult`4">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
            <typeparam name="TError1">
            The error type 1.
            </typeparam>
            <typeparam name="TError2">
            The error type 2.
            </typeparam>
            <typeparam name="TError3">
            The error type 3.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`1)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`1[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`2)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`2[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`3)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(`3[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.#ctor(System.Object[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`4.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`4.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`4.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`4.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`4.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`4.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`4.op_Implicit(`0)~HotChocolate.FieldResult{`0,`1,`2,`3}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`4.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.op_Implicit(`1)~HotChocolate.FieldResult{`0,`1,`2,`3}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError1"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`4.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.op_Implicit(`2)~HotChocolate.FieldResult{`0,`1,`2,`3}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`4.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`4.op_Implicit(`3)~HotChocolate.FieldResult{`0,`1,`2,`3}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`4.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.FieldResult`5">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
            <typeparam name="TError1">
            The error type 1.
            </typeparam>
            <typeparam name="TError2">
            The error type 2.
            </typeparam>
            <typeparam name="TError3">
            The error type 3.
            </typeparam>
            <typeparam name="TError4">
            The error type 4.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`1)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`1[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`2)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`2[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`3)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`3[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`4)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(`4[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.#ctor(System.Object[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`5.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`5.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`5.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`5.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`5.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`5.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`5.op_Implicit(`0)~HotChocolate.FieldResult{`0,`1,`2,`3,`4}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`5.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.op_Implicit(`1)~HotChocolate.FieldResult{`0,`1,`2,`3,`4}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError1"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`5.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.op_Implicit(`2)~HotChocolate.FieldResult{`0,`1,`2,`3,`4}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`5.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.op_Implicit(`3)~HotChocolate.FieldResult{`0,`1,`2,`3,`4}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`5.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`5.op_Implicit(`4)~HotChocolate.FieldResult{`0,`1,`2,`3,`4}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`5.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.FieldResult`6">
            <summary>
            Represents a mutation result.
            </summary>
            <typeparam name="TResult">
            The success result type.
            </typeparam>
            <typeparam name="TError1">
            The error type 1.
            </typeparam>
            <typeparam name="TError2">
            The error type 2.
            </typeparam>
            <typeparam name="TError3">
            The error type 3.
            </typeparam>
            <typeparam name="TError4">
            The error type 4.
            </typeparam>
            <typeparam name="TError5">
            The error type 5.
            </typeparam>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`0)">
            <summary>
            Initializes a mutation success result.
            </summary>
            <param name="value">
            The success result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`1)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`1[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`2)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`2[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`3)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{`3})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`3[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`4)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{`4})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`4[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`5)">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="error">
            The error result value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{`5})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(`5[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.#ctor(System.Object[])">
            <summary>
            Initializes a mutation error result.
            </summary>
            <param name="errors">
            The error result values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="errors"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            - One of the error objects in the <paramref name="errors"/> collection is <c>null</c>.
            - <paramref name="errors"/> is empty.
            </exception>
        </member>
        <member name="P:HotChocolate.FieldResult`6.Value">
            <summary>
            Gets the success result value.
            If <see cref="P:HotChocolate.FieldResult`6.IsSuccess"/> is <c>false</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`6.Errors">
            <summary>
            Gets the errors of this result.
            If <see cref="P:HotChocolate.FieldResult`6.IsSuccess"/> is <c>true</c> then this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`6.IsSuccess">
            <summary>
            Defines if this mutation result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.FieldResult`6.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`0)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the success result value <typeparamref name="TResult"/>
            to a mutation success result.
            </summary>
            <param name="result">
            The success result value.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Value"/>
            set to <paramref name="result"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="result"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`1)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError1"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`2)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`3)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`4)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.FieldResult`6.op_Implicit(`5)~HotChocolate.FieldResult{`0,`1,`2,`3,`4,`5}">
            <summary>
            Implicitly converts the error object <typeparamref name="TError2"/>
            to a mutation error result.
            </summary>
            <param name="error">
            The error object.
            </param>
            <returns>
            Returns a new instance of <see cref="T:HotChocolate.FieldResult`1"/> with <see cref="P:HotChocolate.FieldResult`6.Errors"/>
            set to <paramref name="error"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:HotChocolate.GraphQLDeprecatedAttribute">
            <summary>
            Denotes a deprecated field on a GraphQL type or a
            deprecated value on a GraphQL enum.
            </summary>
        </member>
        <member name="M:HotChocolate.GraphQLDeprecatedAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.GraphQLDeprecatedAttribute"/>
            with a specific deprecation reason.
            </summary>
            <param name="deprecationReason">The deprecation reason.</param>
        </member>
        <member name="P:HotChocolate.GraphQLDeprecatedAttribute.DeprecationReason">
            <summary>
            The reason the field or enum value was deprecated.
            </summary>
        </member>
        <member name="T:HotChocolate.GraphQLTypeAttribute">
            <summary>
            Specifies the GraphQL type.
            </summary>
        </member>
        <member name="M:HotChocolate.GraphQLTypeAttribute.#ctor(System.Type)">
            <summary>
            Specifies the GraphQL type.
            </summary>
            <param name="type">The GraphQL type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="type"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.GraphQLTypeAttribute.#ctor(System.String)">
            <summary>
            Specifies the GraphQL type with SDL type syntax e.g. `[String!]!`.
            </summary>
            <param name="typeSyntax">A string representing a GraphQL type.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="typeSyntax"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.GraphQLTypeAttribute.Type">
            <summary>
            Gets the GraphQL Type.
            </summary>
        </member>
        <member name="P:HotChocolate.GraphQLTypeAttribute.TypeSyntax">
            <summary>
            Gets the GraphQL type syntax.
            </summary>
        </member>
        <member name="T:HotChocolate.GraphQLTypeAttribute`1">
            <summary>
            Specifies the GraphQL type.
            </summary>
        </member>
        <member name="T:HotChocolate.IApplicationServiceProvider">
            <summary>
            Represents the application level service provider.
            </summary>
        </member>
        <member name="T:HotChocolate.IError">
            <summary>
            Represents a GraphQL execution error.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Message">
            <summary>
            Gets the error message.
            This property is mandatory and cannot be null.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Code">
            <summary>
            Gets an error code that can be used to automatically
            process an error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Path">
            <summary>
            Gets the path to the object that caused the error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Locations">
            <summary>
            Gets the source text positions to which this error refers to.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Extensions">
            <summary>
            Gets non-spec error properties.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.IError.Exception">
            <summary>
            Gets the exception associated with this error.
            </summary>
        </member>
        <member name="M:HotChocolate.IError.WithMessage(System.String)">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="message" />.
            </summary>
            <param name="message">
            The error message.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="message" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="message" /> is null or empty.
            </exception>
        </member>
        <member name="M:HotChocolate.IError.WithCode(System.String)">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="code" />.
            </summary>
            <param name="code">
            An error code that is specified as custom error property.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="code" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.RemoveCode">
            <summary>
            Creates a new error that contains all properties of this error
            but with <see cref="P:HotChocolate.IError.Code"/> removed.
            </summary>
            <returns>
            Returns a new error that contains all properties of this error
            but with <see cref="P:HotChocolate.IError.Code"/> removed.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.WithPath(HotChocolate.Path)">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="path" />.
            </summary>
            <param name="path">
            A path representing a certain syntax node of a query or schema.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="path" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.WithPath(System.Collections.Generic.IReadOnlyList{System.Object})">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="path" />.
            </summary>
            <param name="path">
            A path representing a certain syntax node of a query or schema.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="path" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.RemovePath">
            <summary>
            Creates a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Path"/> removed.
            </summary>
            <returns>
            Returns a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Path"/> removed.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.WithLocations(System.Collections.Generic.IReadOnlyList{HotChocolate.Location})">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="locations" />.
            </summary>
            <param name="locations">
            A collection of locations referring to certain
            syntax nodes of a query or schema.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="locations" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.RemoveLocations">
            <summary>
            Creates a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Locations"/> removed.
            </summary>
            <returns>
            Returns a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Locations"/> removed.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.WithExtensions(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="extensions" />.
            </summary>
            <param name="extensions">
            A collection of custom error properties.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="extensions" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.RemoveExtensions">
            <summary>
            Creates a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Extensions"/> removed.
            </summary>
            <returns>
            Returns a new error that contains all properties of this error
            but with the <see cref="P:HotChocolate.IError.Extensions"/> removed.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.SetExtension(System.String,System.Object)">
            <summary>
            Creates a new error that contains all properties of this error
            but with and additional custom error property.
            </summary>
            <param name="key">The custom error property name.</param>
            <param name="value">The value of the custom error property.</param>
            <returns>
            Returns a new error that contains all properties of this error
            but with and additional custom error property.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="key" /> is null or empty.
            </exception>
        </member>
        <member name="M:HotChocolate.IError.RemoveExtension(System.String)">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified additional custom error property removed.
            </summary>
            <param name="key">The custom error property name.</param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified additional custom error property removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="key" /> is null or empty.
            </exception>
        </member>
        <member name="M:HotChocolate.IError.WithException(System.Exception)">
            <summary>
            Creates a new error that contains all properties of this error
            but with the specified <paramref name="exception" />.
            </summary>
            <param name="exception">
            The .net exception that caused this error.
            </param>
            <returns>
            Returns a new error that contains all properties of this error
            but with the specified <paramref name="exception" />.
            </returns>
        </member>
        <member name="M:HotChocolate.IError.RemoveException">
            <summary>
            Creates a new error that contains all properties of this error
            but removed the exception from it.
            </summary>
            <returns>
            Returns a new error that contains all properties of this error
            but without any exception details.
            </returns>
        </member>
        <member name="T:HotChocolate.IErrorFilter">
            <summary>
            An error filter can handle and rewrite errors that occurred
            during execution.
            </summary>
        </member>
        <member name="M:HotChocolate.IErrorFilter.OnError(HotChocolate.IError)">
            <summary>
            OnError is called whenever an error occurred during
            execution of a query.
            </summary>
            <param name="error">
            The error that occurred. This argument cannot be null.
            </param>
            <returns>
            Returns the error passed in to this filter or a rewritten error.
            It is not allowed to return null.
            </returns>
        </member>
        <member name="T:HotChocolate.IErrorHandler">
            <summary>
            The error handler is used to apply error filters onto raised errors.
            </summary>
        </member>
        <member name="M:HotChocolate.IErrorHandler.Handle(HotChocolate.IError)">
            <summary>
            Apply error filter.
            </summary>
            <param name="error">
            The raised error object.
            </param>
            <returns>
            The error object to which all filters where applied.
            </returns>
        </member>
        <member name="M:HotChocolate.IErrorHandler.CreateUnexpectedError(System.Exception)">
            <summary>
            Creates an error from an unexpected exception.
            </summary>
            <param name="exception">
            The exception from which to create an error builder.
            </param>
            <returns>
            The error builder that can be used to tweak and build the error object.
            </returns>
        </member>
        <member name="T:HotChocolate.IExecutable">
            <summary>
            Represents a abstract executable that is well known in the framework. If the execution
            engine encounters a <see cref="T:HotChocolate.IExecutable"/>, it will call execute it
            </summary>
        </member>
        <member name="P:HotChocolate.IExecutable.Source">
            <summary>
            The current state of the executable
            </summary>
        </member>
        <member name="M:HotChocolate.IExecutable.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the executable and returns a list
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns a arbitrary list</returns>
        </member>
        <member name="M:HotChocolate.IExecutable.ToAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the executable and returns an async enumerable.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns an async enumerable</returns>
        </member>
        <member name="M:HotChocolate.IExecutable.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no
            elements.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns the result</returns>
        </member>
        <member name="M:HotChocolate.IExecutable.SingleOrDefaultAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a default value if no such element exists. This method
            throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.IExecutable.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the number of elements in the sequence.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>
            The number of elements in the sequence.
            </returns>
        </member>
        <member name="M:HotChocolate.IExecutable.Print">
            <summary>
            Prints the executable in its current state
            </summary>
            <returns>A string that represents the executables state</returns>
        </member>
        <member name="M:HotChocolate.IExecutable`1.ToListAsync(System.Threading.CancellationToken)">
            <summary>
            Executes the executable and returns a list
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns a arbitrary list</returns>
        </member>
        <member name="M:HotChocolate.IExecutable`1.ToAsyncEnumerable(System.Threading.CancellationToken)">
            <summary>
            Executes the executable and returns an async enumerable.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns an async enumerable</returns>
        </member>
        <member name="M:HotChocolate.IExecutable`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no
            elements.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>Returns the result</returns>
        </member>
        <member name="M:HotChocolate.IExecutable`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a default value if no such element exists. This method
            throws an exception if more than one element satisfies the condition.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the execution.
            </param>
            <returns>
            The single element of the input sequence, or default(T) if the sequence contains no
            </returns>
        </member>
        <member name="T:HotChocolate.IFieldResult">
            <summary>
            This interface allows middleware to access the mutation result value in an generic way.
            </summary>
        </member>
        <member name="P:HotChocolate.IFieldResult.Value">
            <summary>
            Gets the mutation result value.
            </summary>
        </member>
        <member name="P:HotChocolate.IFieldResult.IsSuccess">
            <summary>
            Defines if the mutation was successful and if the result represents a success result.
            </summary>
        </member>
        <member name="P:HotChocolate.IFieldResult.IsError">
            <summary>
            Defines if the mutation had an error and if the result represents a error result.
            </summary>
        </member>
        <member name="T:HotChocolate.IHasContextData">
            <summary>
            Defines that the implementor of this interface allows to
            access and store arbitrary context data.
            </summary>
        </member>
        <member name="P:HotChocolate.IHasContextData.ContextData">
            <summary>
            The context data dictionary can be used by middleware components and
            resolvers to store and retrieve data during execution.
            </summary>
        </member>
        <member name="P:HotChocolate.IHasReadOnlyContextData.ContextData">
            <summary>
            The context data dictionary can be used by middleware components and
            resolvers to retrieve data during execution.
            </summary>
        </member>
        <member name="T:HotChocolate.IndexerPathSegment">
            <summary>
            An <see cref="T:HotChocolate.IndexerPathSegment" /> represents a pointer to
            an list element in the result structure.
            </summary>
        </member>
        <member name="P:HotChocolate.IndexerPathSegment.Index">
            <summary>
            Gets the <see cref="P:HotChocolate.IndexerPathSegment.Index"/> which represents the position an element in a
            list of the result structure.
            </summary>
        </member>
        <member name="M:HotChocolate.IndexerPathSegment.Equals(HotChocolate.Path)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.IndexerPathSegment.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.IOptional">
            <summary>
            This interface represents a way to access optionals easier
            without the need to know the actual value type.
            </summary>
        </member>
        <member name="P:HotChocolate.IOptional.Value">
            <summary>
            The name value.
            </summary>
        </member>
        <member name="P:HotChocolate.IOptional.HasValue">
            <summary>
            <c>true</c> if the optional has a value.
            </summary>
        </member>
        <member name="T:HotChocolate.IQueryableExecutable`1">
            <summary>
            Represents an executable that has a queryable as its source.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:HotChocolate.IQueryableExecutable`1.Source">
            <summary>
            The inner queryable.
            </summary>
        </member>
        <member name="P:HotChocolate.IQueryableExecutable`1.IsInMemory">
            <summary>
            Defines if the queryable is in memory queryable.
            </summary>
        </member>
        <member name="M:HotChocolate.IQueryableExecutable`1.WithSource(System.Linq.IQueryable{`0})">
            <summary>
            Returns a new executable with the provided source
            </summary>
            <param name="source">The source that should be set</param>
            <returns>The new instance of an enumerable executable</returns>
        </member>
        <member name="M:HotChocolate.IQueryableExecutable`1.WithSource``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a new executable with the provided source
            </summary>
            <param name="source">The source that should be set</param>
            <returns>The new instance of an enumerable executable</returns>
        </member>
        <member name="T:HotChocolate.MissingStateException">
            <summary>
            This exception can be thrown if a feature that is dependant on a well-known state
            cannot retrieve it.
            </summary>
        </member>
        <member name="M:HotChocolate.MissingStateException.#ctor(System.String,System.String,HotChocolate.StateKind)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.MissingStateException"/>.
            </summary>
            <param name="feature">
            The feature that depends on the missing state.
            </param>
            <param name="key">
            The key of the missing state.
            </param>
            <param name="kind">
            The state store that is missing the state.
            </param>
        </member>
        <member name="P:HotChocolate.MissingStateException.Feature">
            <summary>
            Gets the feature that depends on the missing state.
            </summary>
        </member>
        <member name="P:HotChocolate.MissingStateException.Key">
            <summary>
            Gets the key of the missing state.
            </summary>
        </member>
        <member name="P:HotChocolate.MissingStateException.Kind">
            <summary>
            Gets the state store that is missing the state.
            </summary>
        </member>
        <member name="T:HotChocolate.ModuleAttribute">
            <summary>
            Specifies the assembly module name that is being used in combination
            with the HotChocolate.Types.Analyzers source generators.
            </summary>
        </member>
        <member name="M:HotChocolate.ModuleAttribute.#ctor(System.String,HotChocolate.ModuleOptions)">
            <summary>
            Initializes new instance of <see cref="T:HotChocolate.ModuleAttribute"/>.
            </summary>
            <param name="name">
            The module name.
            </param>
            <param name="options">
            The source generator features.
            </param>
        </member>
        <member name="P:HotChocolate.ModuleAttribute.Name">
            <summary>
            Gets the module name.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.ModuleAttribute.Options">
            <summary>
            Gets the selected source generator options.
            </summary>
        </member>
        <member name="T:HotChocolate.ModuleOptions">
            <summary>
            The source generator module options.
            </summary>
        </member>
        <member name="F:HotChocolate.ModuleOptions.Default">
            <summary>
            Default options.
            </summary>
        </member>
        <member name="F:HotChocolate.ModuleOptions.RegisterTypes">
            <summary>
            Register types with the source generated module.
            </summary>
        </member>
        <member name="F:HotChocolate.ModuleOptions.RegisterDataLoader">
            <summary>
            Register DataLoader with the source generated module.
            </summary>
        </member>
        <member name="T:HotChocolate.MutationAttribute">
            <summary>
            Marks a public/internal static method or property as a mutation root field.
            The Hot Chocolate source generator will collect these and merge them into
            the mutation type.
            </summary>
        </member>
        <member name="T:HotChocolate.NameFormattingHelpers">
            <summary>
            Contains helpers and extensions to reformat the name of a type system member to conform with
            GraphQL naming standards.
            </summary>
        </member>
        <member name="T:HotChocolate.NamePathSegment">
            <summary>
            An <see cref="T:HotChocolate.IndexerPathSegment" /> represents a pointer to
            an named element in the result structure.
            </summary>
        </member>
        <member name="P:HotChocolate.NamePathSegment.Name">
            <summary>
             Gets the name representing a field on a result map.
            </summary>
        </member>
        <member name="M:HotChocolate.NamePathSegment.Equals(HotChocolate.Path)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.NamePathSegment.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.Optional`1">
            <summary>
            The optional type is used to differentiate between not set and set input values.
            </summary>
        </member>
        <member name="M:HotChocolate.Optional`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Optional`1"/> struct.
            </summary>
            <param name="value">The actual value.</param>
        </member>
        <member name="P:HotChocolate.Optional`1.Value">
            <summary>
            The name value.
            </summary>
        </member>
        <member name="P:HotChocolate.Optional`1.HasValue">
            <summary>
            <c>true</c> if the optional was explicitly set.
            </summary>
        </member>
        <member name="P:HotChocolate.Optional`1.IsEmpty">
            <summary>
            <c>true</c> if the optional was not explicitly set.
            </summary>
        </member>
        <member name="M:HotChocolate.Optional`1.ToString">
            <summary>
            Provides the name string.
            </summary>
            <returns>The name string value</returns>
        </member>
        <member name="M:HotChocolate.Optional`1.Equals(HotChocolate.Optional{`0})">
            <summary>
            Compares this <see cref="T:HotChocolate.Optional`1"/> value to another value.
            </summary>
            <param name="other">
            The second <see cref="T:HotChocolate.Optional`1"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Optional`1"/> values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Optional`1.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:HotChocolate.Optional`1"/> value to another value.
            </summary>
            <param name="obj">
            The second <see cref="T:HotChocolate.Optional`1"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Optional`1"/> values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Optional`1.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Optional`1"/> object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing
            algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Optional`1.op_Equality(HotChocolate.Optional{`0},HotChocolate.Optional{`0})">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Optional`1"/> values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Optional`1.op_Inequality(HotChocolate.Optional{`0},HotChocolate.Optional{`0})">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Optional`1"/> values are not equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Optional`1.op_Implicit(`0)~HotChocolate.Optional{`0}">
            <summary>
            Implicitly creates a new <see cref="T:HotChocolate.Optional`1"/> from
            the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:HotChocolate.Optional`1.op_Implicit(HotChocolate.Optional{`0})~`0">
            <summary>
            Implicitly gets the optional value.
            </summary>
        </member>
        <member name="M:HotChocolate.Optional`1.Empty(`0)">
            <summary>
            Creates an empty optional that provides a default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:HotChocolate.Optional`1.From(HotChocolate.IOptional)">
            <summary>
            Creates a new generic optional from a non-generic optional.
            </summary>
        </member>
        <member name="T:HotChocolate.ParentAttribute">
            <summary>
            Specifies that a resolver parameter represents the parent object.
            </summary>
        </member>
        <member name="M:HotChocolate.ParentAttribute.#ctor(System.String)">
            <summary>
            Specifies that a resolver parameter represents the parent object.
            </summary>
        </member>
        <member name="P:HotChocolate.ParentAttribute.Requires">
            <summary>
            Gets a string representing the property requirements for the parent object.
            </summary>
        </member>
        <member name="T:HotChocolate.Path">
            <summary>
            An <see cref="T:HotChocolate.Path" /> represents a pointer to an element in the result structure.
            </summary>
        </member>
        <member name="P:HotChocolate.Path.Parent">
            <summary>
            Gets the parent path segment.
            </summary>
        </member>
        <member name="P:HotChocolate.Path.Length">
            <summary>
            Gets the count of segments this path contains.
            </summary>
        </member>
        <member name="P:HotChocolate.Path.IsRoot">
            <summary>
            Returns true if the Path is the root element
            </summary>
        </member>
        <member name="M:HotChocolate.Path.Append(System.Int32)">
            <summary>
            Appends an indexer to this path and returns the new path segment.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            Returns the new path segment.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Appending a indexer on the root segment is not allowed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index must be greater than or equal to zero.
            </exception>
        </member>
        <member name="M:HotChocolate.Path.Print">
            <summary>
            Generates a string that represents the current path.
            </summary>
            <returns>
            Returns a string that represents the current path.
            </returns>
        </member>
        <member name="M:HotChocolate.Path.ToList">
            <summary>
            Creates a new list representing the current <see cref="T:HotChocolate.Path"/>.
            </summary>
            <returns>
            Returns a new list representing the current <see cref="T:HotChocolate.Path"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Path.ToString">
            <summary>Returns a string that represents the current <see cref="T:HotChocolate.Path"/>.</summary>
            <returns>A string that represents the current <see cref="T:HotChocolate.Path"/>.</returns>
        </member>
        <member name="M:HotChocolate.Path.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current <see cref="T:HotChocolate.Path"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Path.RootPathSegment.Equals(HotChocolate.Path)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Path.RootPathSegment.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.QueryAttribute">
            <summary>
            Marks a public/internal static method or property as a query root field.
            The Hot Chocolate source generator will collect these and merge them into
            the query type.
            </summary>
        </member>
        <member name="T:HotChocolate.IDesignTimeSchemaDocumentFactory">
            <summary>
            Implement this interface to enable design-time services to create the GraphQL type system.
            </summary>
        </member>
        <member name="T:HotChocolate.ServiceAttribute">
            <summary>
            Marks a resolver parameter as a service that shall be injected by the execution engine.
            </summary>
        </member>
        <member name="M:HotChocolate.ServiceAttribute.#ctor">
            <summary>
            Marks a resolver parameter as a service that shall be injected by the execution engine.
            </summary>
        </member>
        <member name="T:HotChocolate.SingleValueExtensionData">
            <summary>
            An optimized extension data dictionary for <see cref="P:HotChocolate.Execution.IOperationResult.Extensions"/> or
            <see cref="P:HotChocolate.Execution.IExecutionResult.ContextData"/> when only one value is needed.
            </summary>
        </member>
        <member name="M:HotChocolate.SingleValueExtensionData.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.SingleValueExtensionData"/>.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:HotChocolate.SingleValueExtensionData.Count">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SingleValueExtensionData.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SingleValueExtensionData.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.SingleValueExtensionData.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.SingleValueExtensionData.Keys">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.SingleValueExtensionData.Values">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SingleValueExtensionData.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.SingleValueExtensionData.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:HotChocolate.StateKind">
            <summary>
            This enum declares the various state stores of Hot Chocolate.
            </summary>
        </member>
        <member name="F:HotChocolate.StateKind.Global">
            <summary>
            The global state of a request.
            </summary>
        </member>
        <member name="F:HotChocolate.StateKind.Scoped">
            <summary>
            The scoped state of a resolver.
            </summary>
        </member>
        <member name="F:HotChocolate.StateKind.Local">
            <summary>
            The local state of a resolver pipeline.
            </summary>
        </member>
        <member name="F:HotChocolate.StateKind.Response">
            <summary>
            The response state.
            </summary>
        </member>
        <member name="T:HotChocolate.SubscriptionAttribute">
            <summary>
            Marks a public/internal static method or property as a subscription root field.
            The Hot Chocolate source generator will collect these and merge them into
            the subscription type.
            </summary>
        </member>
        <member name="T:HotChocolate.Subscriptions.ITopicEventReceiver">
            <summary>
            The <see cref="T:HotChocolate.Subscriptions.ITopicEventReceiver" /> creates subscriptions to
            specific event topics and returns an <see cref="T:HotChocolate.Execution.ISourceStream`1" />
            which represents a stream of event message for the specified topic.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventReceiver.SubscribeAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified event <paramref name="topicName" />.
            </summary>
            <param name="topicName">
            The topic name to which the event message belongs to.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Execution.ISourceStream`1" />
            for the given event <paramref name="topicName" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventReceiver.SubscribeAsync``1(System.String,System.Nullable{System.Int32},System.Nullable{HotChocolate.Subscriptions.TopicBufferFullMode},System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified event <paramref name="topicName" />.
            </summary>
            <param name="topicName">
            The topic name to which the event message belongs to.
            </param>
            <param name="bufferCapacity">
            The capacity per topic for buffered messages.
            </param>
            <param name="bufferFullMode">
            The action that shall be taken if the topic buffer is full.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Execution.ISourceStream`1" />
            for the given event <paramref name="topicName" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Subscriptions.ITopicEventSender">
            <summary>
            The topic event sender sends event messages to the pub/sub-system.
            Typically a mutation would use the event dispatcher to raise events
            after some changes were committed to the backend system.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventSender.SendAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sends an event message to the pub/sub-system.
            </summary>
            <param name="topicName">
            The topic to which the event message belongs to.
            </param>
            <param name="message">
            The event message.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventSender.CompleteAsync(System.String)">
            <summary>
            Completes a event topic which causes the
            <see cref="T:HotChocolate.Execution.ISourceStream`1" /> to complete.
            </summary>
            <param name="topicName">
            The topic to which the event message belongs to.
            </param>
        </member>
        <member name="P:HotChocolate.Subscriptions.SubscriptionOptions.TopicPrefix">
            <summary>
            Specifies the topic prefix.
            </summary>
        </member>
        <member name="P:HotChocolate.Subscriptions.SubscriptionOptions.TopicBufferCapacity">
            <summary>
            Specifies the in-memory buffer size for messages per topic.
            </summary>
        </member>
        <member name="P:HotChocolate.Subscriptions.SubscriptionOptions.TopicBufferFullMode">
            <summary>
            Specifies the behavior to use when writing to a topic buffer that is already full.
            </summary>
        </member>
        <member name="T:HotChocolate.Subscriptions.TopicBufferFullMode">
            <summary>
            Specifies the behavior to use when writing to a topic buffer that is already full.
            </summary>
        </member>
        <member name="F:HotChocolate.Subscriptions.TopicBufferFullMode.DropNewest">
            <summary>
            Remove and ignore the newest item in the topic channel in order to make room for
            the item being written.
            </summary>
        </member>
        <member name="F:HotChocolate.Subscriptions.TopicBufferFullMode.DropOldest">
            <summary>
            Remove and ignore the oldest item in the topic channel in order to make room for
            the item being written.
            </summary>
        </member>
        <member name="F:HotChocolate.Subscriptions.TopicBufferFullMode.DropWrite">
            <summary>
            Drop the item being written.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IHasRuntimeType">
            <summary>
            The implementor of this interface exposes the type it will have
            at runtime when manifested in the execution engine.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasRuntimeType.RuntimeType">
            <summary>
            Gets the runtime type.
            The runtime type defines of which value the type is when it
            manifests in the execution engine.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputType">
             <summary>
             Represents types that can be used as argument types or as variable types.
             These types essentially specify the data that can be passed into a GraphQL server.
            
             Spec: https://spec.graphql.org/draft/#sec-Input-and-Output-Types
             </summary>
        </member>
        <member name="T:HotChocolate.Types.IType">
            <summary>
            Represents a GraphQL type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IType.Kind">
            <summary>
            Gets the type kind.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ITypeSystemMember">
            <summary>
            This marker interface identifies member of the type system like
            types, directives, the schema or fields and arguments.
            </summary>
        </member>
        <member name="T:HotChocolate.UserState">
            <summary>
            The Hot Chocolate user state can be provided by GraphQL server implementations
            and authorization implementations are depending on this state being added to
            the global state.
            </summary>
        </member>
        <member name="M:HotChocolate.UserState.#ctor(System.Security.Claims.ClaimsPrincipal,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.UserState"/>.
            </summary>
            <param name="user">
            The currently signed in user.
            </param>
            <param name="isAuthenticated">
            Specifies if the currently signed in user is authenticated.
            </param>
        </member>
        <member name="P:HotChocolate.UserState.User">
            <summary>
            The currently signed in user.
            </summary>
        </member>
        <member name="P:HotChocolate.UserState.IsAuthenticated">
            <summary>
            Specifies if the currently signed in user is authenticated.
            If this property is null it means that this state has not yet been determined.
            </summary>
        </member>
        <member name="M:HotChocolate.UserState.SetIsAuthenticated(System.Boolean)">
            <summary>
            Sets the is authenticated state.
            </summary>
            <param name="isAuthenticated">
            The authentication state.
            </param>
            <returns>
            Returns a new user state that contains the authentication state change.
            </returns>
        </member>
        <member name="M:HotChocolate.UserState.Equals(HotChocolate.UserState)">
            <summary>
            Indicates whether the current user state is equal to another user state of the same type.
            </summary>
            <param name="other">A user state to compare with this user state.</param>
            <returns>
            <c>true</c> if the current user state is equal to the
            <paramref name="other">other user state</paramref> user state parameter;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.UserState.Equals(System.Object)">
            <summary>
            Indicates whether the current user state is equal to another user state of the same type.
            </summary>
            <param name="obj">A user state to compare with this user state.</param>
            <returns>
            <c>true</c> if the current user state is equal to the
            <paramref name="obj">other user state</paramref> parameter;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.UserState.GetHashCode">
            <summary>
            Serves as the user state hash function.
            </summary>
            <returns>
            A hash code for the current user state.
            </returns>
        </member>
        <member name="T:HotChocolate.WellKnownContextData">
            <summary>
            Provides keys for well-known context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.EventMessage">
            <summary>
            The key for storing the event message / event payload to the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.Subscription">
            <summary>
            The key for storing the subscription object to the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.DocumentSaved">
            <summary>
            The key for setting a flag the a document was saved to the persisted operation storage.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.NonPersistedOperationAllowed">
            <summary>
            The key that specifies that the current context allows standard operations
            that are not known to the server.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ValidationErrors">
            <summary>
            The key for setting a flag that the execution had document validation errors.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.HttpStatusCode">
            <summary>
            The key allows users to override the status code behavior of the default
            HTTP response formatter.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.OperationNotAllowed">
            <summary>
            The key for setting a flag that an operation was not allowed during request execution.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IntrospectionAllowed">
            <summary>
            The key for setting a flag that introspection is allowed for this request.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IntrospectionMessage">
            <summary>
            The key for setting a message that is being used when introspection is not allowed.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IncludeQueryPlan">
            <summary>
            Includes the query plan into the response.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ResolverConfigs">
            <summary>
            The key for setting resolver configurations.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ResolverTypes">
            <summary>
            The key for setting resolver types.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.RuntimeTypes">
            <summary>
            The key for setting runtime types.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.RootInstance">
            <summary>
            The key for setting root instances.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ResolverServiceScope">
            <summary>
            The key identifies the resolver scope on the local context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.RequestExecutor">
            <summary>
            The key to the current executor.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SchemaName">
            <summary>
            The key to the current schema name.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.Schema">
            <summary>
            The key to the current schema.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SchemaDirectives">
            <summary>
            The key to the schema building directives.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SchemaDocuments">
            <summary>
            The key to the optional schema documents.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.OperationSessionId">
            <summary>
            The key to get the user provided transport operation session id when executing
            GraphQL over Websocket.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.DeferredResultId">
            <summary>
            The key to get the deferred task ID on the scoped context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.InitialValue">
            <summary>
            The key to overwrite the root type instance for a request.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.RemovedResults">
            <summary>
            The key to lookup significant results that were removed during execution.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ExpectedPatches">
            <summary>
            The key to lookup result sets that expect data patches.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.PatchId">
            <summary>
            The key to the patch ID of a result set. The patch ID references the result into which
            the result set containing the patch ID shall be patched into.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.TypeDiscoveryHandlers">
            <summary>
            The key to get the type discovery interceptors from the schema context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.NodeResolver">
            <summary>
            The key to get the node resolvers.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IsRelaySupportEnabled">
            <summary>
            The key to check if relay support is enabled.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.GlobalIdSupportEnabled">
            <summary>
            The key to check if the global identification spec is enabled.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SerializerTypes">
            <summary>
            The key to get the serializer types.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.NodeId">
            <summary>
            The key to get the node id from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.InternalId">
            <summary>
            The key to get the internal id from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.InternalTypeName">
            <summary>
            The key to get the id type name from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.InternalType">
            <summary>
            The key to get the id type from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IdValue">
            <summary>
            The key to get the IdValue object from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IsNodeField">
            <summary>
            The key to get check if a field is the node field.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IsNodesField">
            <summary>
            The key to get check if a field is the nodes field.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.MaxAllowedExecutionDepth">
            <summary>
            The key to override the max allowed execution depth.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SkipDepthAnalysis">
            <summary>
            The key to skip the execution depth analysis.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.MutationConventionDataField">
            <summary>
            The key to the name of the data field when using the mutation convention.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.CacheControlHeaderValue">
            <summary>
            The key to get the Cache-Control header value from the context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.SkipQueryCaching">
            <summary>
            The key to to ski caching a query result.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.CacheControlConstraints">
            <summary>
            The key to retrieve the cache constraints from the operation.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.AuthorizationOptions">
            <summary>
            The key to retrieve the authorization options from the context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.AuthorizationRequestPolicy">
            <summary>
            The key to check if this schema contains request policies.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.UserState">
            <summary>
            The key to access the user state on the global context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.AuthorizationHandler">
            <summary>
            The key to access the authorization handler on the global context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.AllowAnonymous">
            <summary>
            The key to access the authorization allowed flag on the member context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.EnableTrueNullability">
            <summary>
            The key to access the true nullability flag on the execution context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.TagOptions">
            <summary>
            The key to access the tag options object.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.InternalSchemaOptions">
            <summary>
            Type key to access the internal schema options.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.PagingArguments">
            <summary>
            Type key to access the paging arguments in the local resolver state.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.PagingOptions">
            <summary>
            Type key to access the paging options.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ObjectTypeConfigurations">
            <summary>
            Type key to access the object type configuration hooks in the schema builder context data.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.NodeIdResultFormatter">
            <summary>
            Type key to access the node id result formatter on the descriptor context.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.PatternValidationTasks">
            <summary>
            Type key to access the pattern validation tasks.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.CostMetrics">
            <summary>
            The key to retrieve the cost metrics from the global state.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ReportCost">
            <summary>
            The key to set the flag that the cost should be reported in the response.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.ValidateCost">
            <summary>
            The key to set the flag that only the cost should be validated and the request should not be executed.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.RequestCostOptions">
            <summary>
            The key to access the cost options on the context data..
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.PagingObserver">
            <summary>
            The key to access the paging observers stored on the local resolver state.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.FieldRequirementsSyntax">
            <summary>
            The key to access the requirements syntax on an object field definition.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.FieldRequirementsEntity">
            <summary>
            The key to access the requirements entity type on an object field definition.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.FieldRequirements">
            <summary>
            The key to access the compiled requirements.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownContextData.IsWarmupRequest">
            <summary>
            The key to determine whether the request is a warmup request.
            </summary>
        </member>
        <member name="T:HotChocolate.WellKnownDirectives">
            <summary>
            Provides well-known directive names.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Skip">
            <summary>
            The name of the @skip directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Include">
            <summary>
            The name of the @include directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Defer">
            <summary>
            The name of the @defer directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Stream">
            <summary>
            The name of the @stream directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.OneOf">
            <summary>
            The name of the @oneOf directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.IfArgument">
            <summary>
            The name of the if directive argument.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.LabelArgument">
            <summary>
            The name of the label directive argument.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.InitialCount">
            <summary>
            The name of the initialCount directive argument.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Deprecated">
            <summary>
            The name of the @deprecated directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.DeprecationReasonArgument">
            <summary>
            The name of the deprecated directive argument.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.DeprecationDefaultReason">
            <summary>
            The deprecation default reason.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Tag">
            <summary>
            The name of the @tag directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Name">
            <summary>
            The name of the @tag argument name.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.SemanticNonNull">
            <summary>
            The name of the @semanticNonNull directive.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownDirectives.Levels">
            <summary>
            The name of the @semanticNonNull argument levels.
            </summary>
        </member>
        <member name="T:HotChocolate.WellKnownMiddleware">
            <summary>
            Provides keys that identify well-known middleware components.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.Paging">
            <summary>
            This key identifies the paging middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.Projection">
            <summary>
            This key identifies the projection middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.Filtering">
            <summary>
            This key identifies the filtering middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.Sorting">
            <summary>
            This key identifies the sorting middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.DataLoader">
            <summary>
            This key identifies the DataLoader middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.GlobalId">
            <summary>
            This key identifies the relay global ID middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.SingleOrDefault">
            <summary>
            This key identifies the single or default middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.DbContext">
            <summary>
            This key identifies the DbContext middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.ToList">
            <summary>
            This key identifies the ToList middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.ResolverServiceScope">
            <summary>
            The key identifies the resolver service scope middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.PooledService">
            <summary>
            This key identifies a pooled service middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.ResolverService">
            <summary>
            This key identifies a resolver service middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.MutationArguments">
            <summary>
            This key identifies the mutation convention middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.MutationErrors">
            <summary>
            This key identifies the mutation convention middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.MutationErrorNull">
            <summary>
            This key identifies the mutation convention middleware
            that nulls fields when an error was detected.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.MutationResult">
            <summary>
            The key identifies the mutation result middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.Authorization">
            <summary>
            The key identifies the authorization middleware.
            </summary>
        </member>
        <member name="F:HotChocolate.WellKnownMiddleware.SemanticNonNull">
            <summary>
            This key identifies the semantic-non-null middleware.
            </summary>
        </member>
    </members>
</doc>
