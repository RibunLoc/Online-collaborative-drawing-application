<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language.SyntaxTree</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            /// <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:HotChocolate.Language.ArgumentNode">
            <summary>
            This syntax node represents a argument value of a <see cref="T:HotChocolate.Language.FieldNode"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(System.String,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(HotChocolate.Language.NameNode,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ArgumentNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The argument name.
            </param>
            <param name="value">
            The argument value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ArgumentNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ArgumentNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ArgumentNode.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ArgumentNode.Value">
            <summary>
            The value of the argument.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ArgumentNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ArgumentNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ArgumentNode.WithValue(HotChocolate.Language.IValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ArgumentNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.BooleanValueNode">
            <summary>
            Represents a boolean value literal.
            The two keywords true and false represent the two boolean values.
            https://spec.graphql.org/October2021/#sec-Boolean-Value
            </summary>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.BooleanValueNode"/>
            </summary>
            <param name="value">
            The boolean value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.#ctor(HotChocolate.Language.Location,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.BooleanValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The boolean value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.Value">
            <summary>
            The runtime value of this value literal.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.HotChocolate#Language#IValueNode#Value">
            <summary>
            The runtime value of this value literal.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.BooleanValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.WithValue(System.Boolean)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.BooleanValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.True">
            <summary>
            Represents the true value for the boolean literal.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.BooleanValueNode.False">
            <summary>
            Represents the false value for the boolean literal.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ComplexTypeDefinitionNodeBase">
            <summary>
            The base class for complex type definitions e.g. interface or object
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ComplexTypeDefinitionNodeBase.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Initializes a new instance of
            <see cref="T:HotChocolate.Language.ComplexTypeDefinitionNodeBase"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="directives">
            The directives that are annotated to this syntax node.
            </param>
            <param name="interfaces">
            The interfaces that this type implements.
            </param>
            <param name="fields">
            The fields that this type exposes.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Interfaces">
            <summary>
            Gets the interfaces that this type implements.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Fields">
            <summary>
            Gets the fields that this type exposes.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IDefinitionNode">
            <summary>
            Document definition nodes represent root level syntax nodes.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IExecutableDefinitionNode">
            <summary>
            Executable definition nodes are root level syntax nodes
            for query documents.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IFloatValueLiteral">
            <summary>
            Represents literals that can be converted to C# float runtime values.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IFloatValueLiteral.ToSingle">
            <summary>
            Parses the literal as <see cref="T:System.Single"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IFloatValueLiteral.ToDouble">
            <summary>
            Parses the literal as <see cref="T:System.Double"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IFloatValueLiteral.ToDecimal">
            <summary>
            Parses the literal as <see cref="T:System.Decimal"/> .
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IHasDirectives">
            <summary>
            Represents a syntax node that has directives.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IHasDirectives.Directives">
            <summary>
            Gets the directives of a syntax node.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IHasName">
            <summary>
            Represents named syntax nodes.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IHasName.Name">
            <summary>
            Gets a name of the named syntax node.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IHasSpan">
            <summary>
            This interfaces is implemented by value literals to give access to the memory of the raw value.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IHasSpan.AsSpan">
            <summary>
            Gets access to the raw value representation of a value literal syntax node.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IIntValueLiteral">
            <summary>
            Represents literals that can be converted to C# integer runtime values.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToByte">
            <summary>
            Parses the literal as <see cref="T:System.Byte"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToInt16">
            <summary>
            Parses the literal as <see cref="T:System.Int16"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToInt32">
            <summary>
            Parses the literal as <see cref="T:System.Int32"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToInt64">
            <summary>
            Parses the literal as <see cref="T:System.Int64"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToSByte">
            <summary>
            Parses the literal as <see cref="T:System.SByte"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToUInt16">
            <summary>
            Parses the literal as <see cref="T:System.UInt16"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToUInt32">
            <summary>
            Parses the literal as <see cref="T:System.UInt32"/> .
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IIntValueLiteral.ToUInt64">
            <summary>
            Parses the literal as <see cref="T:System.UInt64"/> .
            </summary>
        </member>
        <member name="T:HotChocolate.Language.INamedSyntaxNode">
            <summary>
            Represents named syntax nodes.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.INullableTypeNode">
            <summary>
            Represents nullable types eg. <see cref="T:HotChocolate.Language.ListTypeNode"/> and <see cref="T:HotChocolate.Language.NamedTypeNode"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ISelectionNode">
            <summary>
            Represents a syntax node that is a selection in a <see cref="T:HotChocolate.Language.SelectionSetNode"/>.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ISyntaxNode">
            <summary>
            Represents a non-terminal node in the GraphQL syntax tree.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ISyntaxNode.Kind">
            <summary>
            Returns the <see cref="T:HotChocolate.Language.SyntaxKind"/> of the node.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ISyntaxNode.Location">
            <summary>
            Gets a <see cref="P:HotChocolate.Language.ISyntaxNode.Location"/> of this node in the parsed source text
            if available the parser provided this information.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNode.GetNodes">
            <summary>
            Gets the children of this node.
            </summary>
            <returns>
            Returns the children of this node..
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ITypeDefinitionNode">
            <summary>
            Represents type definition syntax.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ITypeDefinitionNode.Description">
            <summary>
            Gets the description of the type definition.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ITypeExtensionNode">
            <summary>
            Represents type extensions that has a name like <see cref="T:HotChocolate.Language.ObjectTypeExtensionNode" />.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ITypeNode">
            <summary>
            A syntax node that represents a type reference eg. String or [Int!]
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ITypeSystemDefinitionNode">
            <summary>
            The GraphQL language includes an IDL used to describe a GraphQL service’s
            type system. Tools may use this definition language to provide utilities
            such as client code generation or service boot‐strapping.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ITypeSystemExtensionNode">
            <summary>
            <para>
            Type system extensions are used to represent a GraphQL type system which
            has been extended from some original type system. For example, this might
            be used by a local service to represent data a GraphQL client only accesses
            locally, or by a GraphQL service which is itself an extension of another GraphQL
            service.
            </para>
            <para>https://graphql.github.io/graphql-spec/June2018/#sec-Type-System-Extensions</para>
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IValueNode">
            <summary>
            A GraphQL value literal.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IValueNode.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.IValueNode`1">
            <summary>
            A GraphQL value literal.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.IValueNode`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.DirectiveDefinitionNode">
            <summary>
            A GraphQL schema describes directives which are used to annotate various parts of a
            GraphQL document as an indicator that they should be evaluated differently
            by a validator, executor, or client tool such as a code generator.
            https://spec.graphql.org/October2021/#sec-Type-System.Directives
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Boolean,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NameNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DirectiveDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="description">
            The description of the directive.
            </param>
            <param name="isRepeatable">
            Defines that the directive is repeatable and can be applied multiple times.
            </param>
            <param name="arguments">
            The arguments of the directive-
            </param>
            <param name="locations">
            The locations to which the directive can be annotated.
            </param>
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Name">
            <summary>
            Gets the name of the directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Description">
            <summary>
            Gets the description of this directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.IsRepeatable">
            <summary>
            Defines that this directive is repeatable and can be applied multiple times.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Arguments">
            <summary>
            Gets the argument definitions of this directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DirectiveDefinitionNode.Locations">
            <summary>
            Gets the locations to which this directive can be annotated to.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.GetNodes">
            <inheritdoc cref="T:HotChocolate.Language.ISyntaxNode"/>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.AsRepeatable(System.Boolean)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.IsRepeatable" /> with <paramref name="repeatable" />.
            </summary>
            <param name="repeatable">
            The repeatable that shall be used to replace the current <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.IsRepeatable"/>.
            </param>
            <returns>
            Returns the new node with the new <paramref name="repeatable" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.WithArguments(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.Arguments" /> with <paramref name="arguments" />.
            </summary>
            <param name="arguments">
            The arguments that shall be used to replace the current arguments.
            </param>
            <returns>
            Returns the new node with the new <paramref name="arguments" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveDefinitionNode.WithLocations(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NameNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveDefinitionNode.Arguments" /> with <paramref name="locations" />.
            </summary>
            <param name="locations">
            The locations that shall be used to replace the current locations.
            </param>
            <returns>
            Returns the new node with the new <paramref name="locations" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.DirectiveNode">
            <summary>
            Represents an applied directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.#ctor(System.String,HotChocolate.Language.ArgumentNode[])">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DirectiveNode"/>.
            </summary>
            <param name="name">
            The name of the directive.
            </param>
            <param name="arguments">
            The argument values of this directive.
            </param>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.#ctor(System.String,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DirectiveNode"/>.
            </summary>
            <param name="name">
            The name of the directive.
            </param>
            <param name="arguments">
            The argument values of this directive.
            </param>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.#ctor(HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DirectiveNode"/>.
            </summary>
            <param name="name">
            The name of the directive.
            </param>
            <param name="arguments">
            The argument values of this directive.
            </param>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DirectiveNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the directive.
            </param>
            <param name="arguments">
            The argument values of this directive.
            </param>
        </member>
        <member name="P:HotChocolate.Language.DirectiveNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DirectiveNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DirectiveNode.Name">
            <summary>
            Gets the name of this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DirectiveNode.Arguments">
            <summary>
            Gets the argument values of this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DirectiveNode.WithArguments(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.DirectiveNode.Arguments" /> with <paramref name="arguments" />.
            </summary>
            <param name="arguments">
            The arguments that shall be used to replace the current arguments.
            </param>
            <returns>
            Returns the new node with the new <paramref name="arguments" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.DocumentNode">
            <summary>
            <para>
            The <see cref="T:HotChocolate.Language.DocumentNode"/> represents a parsed GraphQL document
            which also is the root node of a parsed GraphQL document.
            </para>
            <para>The document can contain schema definition nodes or query nodes.</para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DocumentNode"/>.
            </summary>
            <param name="definitions">
            The GraphQL definitions this document contains.
            </param>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DocumentNode"/>.
            </summary>
            <param name="location">
            The location of the document in the parsed source text.
            </param>
            <param name="definitions">
            The GraphQL definitions this document contains.
            </param>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IDefinitionNode},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.DocumentNode"/>.
            </summary>
            <param name="location">
            The location of the document in the parsed source text.
            </param>
            <param name="definitions">
            The GraphQL definitions this document contains.
            </param>
            <param name="nodesCount">
            The count of all nodes.
            </param>
            <param name="fieldsCount">
            The count all fields.
            </param>
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.Definitions">
            <summary>
            Gets the documents definitions.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.Count">
            <summary>
            Gets the number of nodes in this document.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.FieldsCount">
            <summary>
            Gets the number of fields in this document.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new instance that has all the characteristics of this
            documents but with a different location.
            </summary>
            <param name="location">
            The location that shall be applied to the new document.
            </param>
            <returns>
            Returns a new instance that has all the characteristics of this
            documents but with a different location.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.DocumentNode.WithDefinitions(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IDefinitionNode})">
            <summary>
            Creates a new instance that has all the characteristics of this
            documents but with different definitions.
            </summary>
            <param name="definitions">
            The definitions that shall be applied to the new document.
            </param>
            <returns>
            Returns a new instance that has all the characteristics of this
            documents but with a different definitions.
            </returns>
        </member>
        <member name="P:HotChocolate.Language.DocumentNode.Empty">
            <summary>
            Gets an empty GraphQL document.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.EnumTypeDefinitionNode">
            <summary>
            <para>
            GraphQL Enum types, like Scalar types, also represent leaf values in a GraphQL type system.
            However Enum types describe the set of possible values.
            </para>
            <para>
            Enums are not references for a numeric value, but are unique values in their own right.
            They may serialize as a string: the name of the represented value.
            </para>
            <para>
            https://spec.graphql.org/October2021/#sec-Enums
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.EnumValueDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="description">
            The description of the directive.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="values">
            The enum values.
            </param>
        </member>
        <member name="P:HotChocolate.Language.EnumTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.EnumTypeDefinitionNode.Description">
            <summary>
            Gets the description of this enum type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumTypeDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNode.WithValues(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.EnumValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumTypeDefinitionNodeBase.Values" /> with <paramref name="values" />.
            </summary>
            <param name="values">
            The values that shall be used to replace the current values.
            </param>
            <returns>
            Returns the new node with the new <paramref name="values" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.EnumTypeDefinitionNodeBase">
            <summary>
            The base class for enum type definitions.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeDefinitionNodeBase.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.EnumValueDefinitionNode})">
            <summary>
            Initializes a new instance of
            <see cref="T:HotChocolate.Language.EnumTypeDefinitionNodeBase"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The enum type name.
            </param>
            <param name="directives">
            The directives applied to the enum type.
            </param>
            <param name="values">
            The enum values.
            </param>
        </member>
        <member name="P:HotChocolate.Language.EnumTypeDefinitionNodeBase.Values">
            <summary>
            Gets the enum values.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.EnumTypeExtensionNode">
            <summary>
            Enum type extensions are used to represent an enum type which has been extended
            from some original enum type. For example, this might be used to represent additional
            local data, or by a GraphQL service which is itself an extension of another GraphQL service.
            https://spec.graphql.org/October2021/#sec-Enum-Extensions
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.EnumValueDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumTypeExtensionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="values">
            The enum values.
            </param>
        </member>
        <member name="P:HotChocolate.Language.EnumTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumTypeExtensionNode.WithValues(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.EnumValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumTypeDefinitionNodeBase.Values" /> with <paramref name="values" />.
            </summary>
            <param name="values">
            The values that shall be used to replace the current values.
            </param>
            <returns>
            Returns the new node with the new <paramref name="values" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.EnumValueDefinitionNode">
            <summary>
            Represents a possible value of a GraphQL enum type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumValueDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="description">
            The description of the directive.
            </param>
            <param name="directives">
            The applied directives.
            </param>
        </member>
        <member name="P:HotChocolate.Language.EnumValueDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.EnumValueDefinitionNode.Description">
            <summary>
            Gets the description of this enum value.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumValueDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.EnumValueNode">
            <summary>
            <para>Represents a enum value literal.</para>
            <para>http://facebook.github.io/graphql/June2018/#sec-Enum-Value</para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode"/>.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode"/>.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.#ctor(HotChocolate.Language.Location,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.EnumValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.EnumValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.EnumValueNode.Value">
            <inheritdoc cref="T:HotChocolate.Language.IValueNode`1" />
        </member>
        <member name="P:HotChocolate.Language.EnumValueNode.HotChocolate#Language#IValueNode#Value">
            <inheritdoc cref="T:HotChocolate.Language.IValueNode" />
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.WithValue(System.String)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.EnumValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value of this literal.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SyntaxNodeExtensions.IsNull(HotChocolate.Language.IValueNode)">
            <summary>
            Specifies if the current value node represents <c>null</c>.
            </summary>
            <param name="value">
            The value node.
            </param>
            <returns>
            Returns <c>true</c> if the current value node represents <c>null</c>;
            otherwise, <c>false</c> is returned.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.FieldDefinitionNode">
            <summary>
            Represents a filed definition of an interface- or object-type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode},HotChocolate.Language.ITypeNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FieldDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="description">
            The description of the directive.
            </param>
            <param name="arguments">
            The arguments of this field definition.
            </param>
            <param name="type">
            The return type of this field definition.
            </param>
            <param name="directives">
            The applied directives.
            </param>
        </member>
        <member name="P:HotChocolate.Language.FieldDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.FieldDefinitionNode.Description">
            <summary>
            Gets the description of this field definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FieldDefinitionNode.Arguments">
            <summary>
            Gets the arguments of this field definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FieldDefinitionNode.Type">
            <summary>
            Gets the return type of this field definition.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithArguments(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldDefinitionNode.Arguments" /> with <paramref name="arguments" />.
            </summary>
            <param name="arguments">
            The arguments that shall be used to replace the current <see cref="P:HotChocolate.Language.FieldDefinitionNode.Arguments"/>.
            </param>
            <returns>
            Returns the new node with the new <paramref name="arguments" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithType(HotChocolate.Language.ITypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldDefinitionNode.Type" /> with <paramref name="type" />.
            </summary>
            <param name="type">
            The type that shall be used to replace the current <see cref="P:HotChocolate.Language.FieldDefinitionNode.Type"/>.
            </param>
            <returns>
            Returns the new node with the new <paramref name="type" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.FieldNode">
            <summary>
            <para>
            A field describes one discrete piece of information available to
            request within a selection set.
            </para>
            <para>
            Some fields describe complex data or relationships to other data.
            In order to further explore this data, a field may itself contain
            a selection set, allowing for deeply nested requests.
            </para>
            <para>
            All GraphQL operations must specify their selections down to fields
            which return scalar values to ensure an unambiguously shaped response.
            </para>
            <para>Field : Alias? Name Arguments? Nullability? Directives? SelectionSet?</para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FieldNode"/>.
            </summary>
            <param name="name">
            The field name.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.#ctor(HotChocolate.Language.NameNode,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode},HotChocolate.Language.SelectionSetNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FieldNode"/>.
            </summary>
            <param name="name">
            The field name.
            </param>
            <param name="alias">
            The fields alias name used instead if the actual name.
            </param>
            <param name="directives">
            The field directives.
            </param>
            <param name="arguments">
            The field argument values.
            </param>
            <param name="selectionSet">
            The fields selection set.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode},HotChocolate.Language.SelectionSetNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FieldNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The field name.
            </param>
            <param name="alias">
            The fields alias name used instead if the actual name.
            </param>
            <param name="directives">
            The field directives.
            </param>
            <param name="arguments">
            The field argument values.
            </param>
            <param name="selectionSet">
            The fields selection set.
            </param>
        </member>
        <member name="P:HotChocolate.Language.FieldNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.FieldNode.Alias">
            <summary>
            By default, a field’s response key in the response object will use that field’s name.
            However, you can define a different response key by specifying an alias.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FieldNode.Arguments">
            <summary>
            Gets the assigned field argument values.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FieldNode.SelectionSet">
            <summary>
            Gets the fields selection set.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.FieldNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithAlias(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldNode.Alias" /> with <paramref name="alias" />.
            </summary>
            <param name="alias">
            The alias that shall be used to replace the current <see cref="P:HotChocolate.Language.FieldNode.Alias" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="alias" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithArguments(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ArgumentNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldNode.Arguments" /> with <paramref name="arguments" />.
            </summary>
            <param name="arguments">
            The arguments that shall be used to replace the current <see cref="P:HotChocolate.Language.FieldNode.Arguments" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="arguments" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FieldNode.WithSelectionSet(HotChocolate.Language.SelectionSetNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FieldNode.SelectionSet" /> with <paramref name="selectionSet" />.
            </summary>
            <param name="selectionSet">
            The selectionSet that shall be used to replace the current <see cref="P:HotChocolate.Language.FieldNode.SelectionSet" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="selectionSet" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.FloatFormat">
            <summary>
            Specifies the format of a parsed float literal.
            </summary>
        </member>
        <member name="F:HotChocolate.Language.FloatFormat.FixedPoint">
            <summary>
            The value string had a fixed point eg. 1.555
            </summary>
        </member>
        <member name="F:HotChocolate.Language.FloatFormat.Exponential">
            <summary>
            The value has the e notation eg. 6.022e23
            </summary>
        </member>
        <member name="T:HotChocolate.Language.FloatValueNode">
            <summary>
            <para>
            A FloatValue includes either a decimal point (ex. 1.0) or an exponent (ex. 1e50) or
            both (ex. 6.0221413e23) and may be negative. Like IntValue, it also must not have any
            leading 0.
            </para>
            <para>
            A FloatValue must not be followed by a Digit. In other words, a FloatValue token is always
            the longest possible valid sequence. The source characters 1.23 cannot be interpreted as
            two tokens since 1.2 is followed by the Digit 3.
            </para>
            <para>
            A FloatValue must not be followed by a .. For example, the sequence 1.23.4 cannot
            be interpreted as two tokens (1.2, 3.4).
            </para>
            <para>
            A FloatValue must not be followed by a NameStart. For example the sequence 0x1.2p3
            has no valid lexical representation.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(HotChocolate.Language.Location,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(HotChocolate.Language.Location,System.Decimal)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(System.ReadOnlyMemory{System.Byte},HotChocolate.Language.FloatFormat)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="format">
            The format of the parsed float value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.#ctor(HotChocolate.Language.Location,System.ReadOnlyMemory{System.Byte},HotChocolate.Language.FloatFormat)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FloatValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="format">
            The format of the parsed float value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.FloatValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.FloatValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.FloatValueNode.Format">
            <summary>
            Gets the format of the parsed float value.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FloatValueNode.Value">
            <summary>
            The raw parsed string representation of the parsed value node.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToSingle">
            <summary>
            Reads the parsed float value as <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToDouble">
            <summary>
            Reads the parsed float value as <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToDecimal">
            <summary>
            Reads the parsed float value as <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.AsSpan">
            <summary>
            Gets a readonly span to access the float value memory.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FloatValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.WithValue(System.Double)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FloatValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.WithValue(System.Decimal)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FloatValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.WithValue(System.ReadOnlyMemory{System.Byte},HotChocolate.Language.FloatFormat)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FloatValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <param name="format">
            The parsed float format.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.WithValue(System.ReadOnlySpan{System.Byte},HotChocolate.Language.FloatFormat)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FloatValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <param name="format">
            The parsed float format.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.FragmentDefinitionNode">
            <summary>
            <para>
            Represents a named fragment definition.
            </para>
            <para>
            Fragments are the primary unit of composition in GraphQL.
            </para>
            <para>
            Fragments allow for the reuse of common repeated selections of fields,
            reducing duplicated text in the document.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.VariableDefinitionNode},HotChocolate.Language.NamedTypeNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},HotChocolate.Language.SelectionSetNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FragmentDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the fragment definition.
            </param>
            <param name="variableDefinitions">
            The variables that are declared for this fragment definition.
            </param>
            <param name="typeCondition">
            The type condition.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="selectionSet">
            The fragments selection set.
            </param>
        </member>
        <member name="P:HotChocolate.Language.FragmentDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.FragmentDefinitionNode.VariableDefinitions">
            <summary>
            Gets the variables that are declared for this fragment definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FragmentDefinitionNode.TypeCondition">
            <summary>
            Gets the type condition.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.FragmentDefinitionNode.SelectionSet">
            <summary>
            Gets the fragments selection set.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithVariableDefinitions(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.VariableDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FragmentDefinitionNode.VariableDefinitions" /> with <paramref name="variableDefinitions" />.
            </summary>
            <param name="variableDefinitions">
            The variable definitions that shall be used to replace the
            current <see cref="P:HotChocolate.Language.FragmentDefinitionNode.VariableDefinitions" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="variableDefinitions" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithTypeCondition(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FragmentDefinitionNode.TypeCondition" /> with <paramref name="typeCondition" />.
            </summary>
            <param name="typeCondition">
            The type condition that shall be used to replace the
            current <see cref="P:HotChocolate.Language.FragmentDefinitionNode.TypeCondition" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="typeCondition" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentDefinitionNode.WithSelectionSet(HotChocolate.Language.SelectionSetNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.FragmentDefinitionNode.SelectionSet" /> with <paramref name="selectionSet" />.
            </summary>
            <param name="selectionSet">
            The selectionSet that shall be used to replace the current <see cref="P:HotChocolate.Language.FragmentDefinitionNode.SelectionSet" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="selectionSet" />.
            </returns>
        </member>
        <member name="P:HotChocolate.Language.FragmentSpreadNode.Kind">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Language.FragmentSpreadNode.GetNodes">
            <inheritdoc/>
        </member>
        <member name="M:HotChocolate.Language.FragmentSpreadNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FragmentSpreadNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InlineFragmentNode">
            <summary>
            <para>
            Represents an inline fragment.
            </para>
            <para>
            Inline Fragments can be used directly within
            a selection to condition upon a type condition
            when querying against an interface or union.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NamedTypeNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},HotChocolate.Language.SelectionSetNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.FragmentDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="typeCondition">
            The type condition.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="selectionSet">
            The fragments selection set.
            </param>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InlineFragmentNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.WithTypeCondition(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InlineFragmentNode.TypeCondition" /> with <paramref name="typeCondition" />.
            </summary>
            <param name="typeCondition">
            The type condition that shall be used to replace the
            current <see cref="P:HotChocolate.Language.InlineFragmentNode.TypeCondition" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="typeCondition" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InlineFragmentNode.WithSelectionSet(HotChocolate.Language.SelectionSetNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InlineFragmentNode.SelectionSet" /> with <paramref name="selectionSet" />.
            </summary>
            <param name="selectionSet">
            The selectionSet that shall be used to replace the current <see cref="P:HotChocolate.Language.InlineFragmentNode.SelectionSet" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="selectionSet" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InputObjectTypeDefinitionNode">
            <summary>
            <para>
            A GraphQL Input Object defines a set of input fields; the input fields are either scalars, enums, or other input objects. This allows arguments to accept arbitrarily complex structs.
            </para>
            <para>
            In this example, an Input Object called Point2D describes x and y inputs:
            <code>
            input Point2D {
              x: Float
              y: Float
            }
            </code>
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.InputObjectTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object.
            </param>
            <param name="description">
            The description of the input object.
            </param>
            <param name="directives">
            The directives of this input object.
            </param>
            <param name="fields">
            The fields of this input object.
            </param>
        </member>
        <member name="P:HotChocolate.Language.InputObjectTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.InputObjectTypeDefinitionNode.Description">
            <summary>
            Gets the input object description.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" /> with <paramref name="fields" />.
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InputObjectTypeDefinitionNodeBase">
            <summary>
            The base class for input object types and input object type extensions.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.InputObjectTypeDefinitionNodeBase"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object type.
            </param>
            <param name="directives">
            The directives of the input object type.
            </param>
            <param name="fields">
            The input fields of the input object type.
            </param>
        </member>
        <member name="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields">
            <summary>
            Gets the input fields.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.InputObjectTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputObjectTypeExtensionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.InputValueDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" /> with <paramref name="fields" />.
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InputValueDefinitionNode">
            <summary>
            <para>
            Represents the field definition of an input object.
            </para>
            <para>
            A GraphQL Input Object defines a set of input fields; the input fields are either
            scalars, enums, or other input objects. This allows arguments to accept arbitrarily
            complex structs.
            </para>
            <para>
            https://graphql.github.io/graphql-spec/June2018/#sec-Input-Objects
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,HotChocolate.Language.ITypeNode,HotChocolate.Language.IValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.InputValueDefinitionNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input field.
            </param>
            <param name="description">
            The description of the input field.
            </param>
            <param name="type">
            The type of this input field.
            </param>
            <param name="defaultValue">
            The default value of this input field.
            </param>
            <param name="directives">
            The directives of this input object.
            </param>
        </member>
        <member name="P:HotChocolate.Language.InputValueDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.InputValueDefinitionNode.Description">
            <summary>
            Gets the description of this input field.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.InputValueDefinitionNode.Type">
            <summary>
            Gets the type of this input field.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.InputValueDefinitionNode.DefaultValue">
            <summary>
            Gets the default value of this input field.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputValueDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithType(HotChocolate.Language.ITypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputValueDefinitionNode.Type" /> with <paramref name="type" />.
            </summary>
            <param name="type">
            The type that shall be used to replace the current type.
            </param>
            <returns>
            Returns the new node with the new <paramref name="type" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithDefaultValue(HotChocolate.Language.IValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputValueDefinitionNode.DefaultValue" /> with <paramref name="defaultValue" />.
            </summary>
            <param name="defaultValue">
            The default value that shall be used to replace the current <see cref="P:HotChocolate.Language.InputValueDefinitionNode.DefaultValue" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="defaultValue" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InputValueDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InterfaceTypeDefinitionNode">
             <summary>
             <para>
             GraphQL interfaces represent a list of named fields and their arguments.
             GraphQL objects and interfaces can then implement these interfaces which requires
             that the implementing type will define all fields defined by those interfaces.
            </para>
             <para>
             Fields on a GraphQL interface have the same rules as fields on a GraphQL object;
             their type can be Scalar, Object, Enum, Interface, or Union, or any wrapping type
             whose base type is one of those five.
             </para>
             <code>
             interface NamedEntity {
               name: String
             }
             </code>
             </summary>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.InterfaceTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of this interface.
            </param>
            <param name="description">
            The description of this interface.
            </param>
            <param name="directives">
            The applied directives of this interface.
            </param>
            <param name="interfaces">
            The interfaces implemented by this interface.
            </param>
            <param name="fields">
            The fields of this interface.
            </param>
        </member>
        <member name="P:HotChocolate.Language.InterfaceTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.InterfaceTypeDefinitionNode.Description">
            <summary>
            Gets the interface description.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InterfaceTypeDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" /> with <paramref name="fields" />.
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeDefinitionNode.WithInterfaces(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Interfaces" /> with <paramref name="interfaces" />.
            </summary>
            <param name="interfaces">
            The <paramref name="interfaces"/> that shall be used to replace the current
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="interfaces" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.InterfaceTypeExtensionNode">
            <summary>
            <para>
            Interface type extensions are used to represent an interface which has been
            extended from some original interface. For example, this might be used to
            represent common local data on many types, or by a GraphQL service which is
            itself an extension of another GraphQL service.
            </para>
            <code>
            extend interface NamedEntity {
              name: String
            }
            </code>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.InterfaceTypeExtensionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of this interface..
            </param>
            <param name="directives">
            The applied directives of this interface.
            </param>
            <param name="interfaces">
            The interfaces implemented by this interface.
            </param>
            <param name="fields">
            The fields of this interface.
            </param>
        </member>
        <member name="P:HotChocolate.Language.InterfaceTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" /> with <paramref name="fields" />.
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current
            <see cref="P:HotChocolate.Language.InputObjectTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.InterfaceTypeExtensionNode.WithInterfaces(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Interfaces" /> with <paramref name="interfaces" />.
            </summary>
            <param name="interfaces">
            The <paramref name="interfaces"/> that shall be used to replace the current
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Fields" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="interfaces" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.IntValueNode">
            <summary>
            <para>
            An IntValue is specified without a decimal point or exponent but may be negative (ex. -123).
            It must not have any leading 0.
            </para>
            <para>
            An IntValue must not be followed by a Digit. In other words, an IntValue token is always
            the longest possible valid sequence. The source characters 12 cannot be interpreted as
            two tokens since 1 is followed by the Digit 2. This also means the source 00 is invalid
            since it can neither be interpreted as a single token nor two 0 tokens.
            </para>
            <para>
            An IntValue must not be followed by a . or NameStart.
            If either . or ExponentIndicator follows then the token must only be interpreted as a
            possible FloatValue. No other NameStart character can follow. For example the sequences
            0x123 and 123L have no valid lexical representations.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.Int16)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.SByte)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.UInt16)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.UInt32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.UInt64)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.#ctor(HotChocolate.Language.Location,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.IntValueNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.IntValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.IntValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.IntValueNode.Value">
            <summary>
            The raw parsed string representation of the parsed value node.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToByte">
            <summary>
            Reads the parsed int value as <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToInt16">
            <summary>
            Reads the parsed int value as <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToInt32">
            <summary>
            Reads the parsed int value as <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToInt64">
            <summary>
            Reads the parsed int value as <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToSByte">
            <summary>
            Reads the parsed int value as <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToUInt16">
            <summary>
            Reads the parsed int value as <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToUInt32">
            <summary>
            Reads the parsed int value as <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToUInt64">
            <summary>
            Reads the parsed int value as <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToSingle">
            <summary>
            Reads the parsed int value as <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToDouble">
            <summary>
            Reads the parsed int value as <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToDecimal">
            <summary>
            Reads the parsed int value as <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.AsSpan">
            <summary>
            Gets a readonly span to access the int value memory.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.Byte)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.SByte)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.Int16)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.Int32)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.Int64)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.WithValue(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.IntValueNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current value.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ListTypeNode">
            <summary>
            <para>
            Represents the GraphQL list type syntax.
            </para>
            <para>
            A GraphQL list is a special collection type which declares the
            type of each item in the List (referred to as the item type of
            the list). List values are serialized as ordered lists, where each
            item in the list is serialized as per the item type.
            </para>
            <para>
            To denote that a field uses a List type the item type is wrapped
            in square brackets like this: pets: [Pet]. Nesting lists is allowed: matrix: [[Int]].
            </para>
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ListTypeNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ListTypeNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ListTypeNode.Type">
            <summary>
            Gets the element type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ListTypeNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ListTypeNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ListTypeNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListTypeNode.WithType(HotChocolate.Language.ITypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ListTypeNode.Type" /> with <paramref name="type" />.
            </summary>
            <param name="type">
            The type that shall be used to replace the current <see cref="P:HotChocolate.Language.ListTypeNode.Type" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="type" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListTypeNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListTypeNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ListValueNode">
            <summary>
            <para>
            Represents list value syntax.
            </para>
            <para>
            Lists are ordered sequences of values wrapped in square-brackets [ ].
            The values of a List literal may be any value literal or variable (ex. [1, 2, 3]).
            </para>
            <para>
            Commas are optional throughout GraphQL so trailing commas are allowed and
            repeated commas do not represent missing values.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.#ctor(HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="item">
            The item that shall be the only item of this list.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="item">
            The item that shall be the only item of this list.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IValueNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="items">
            The items of this list.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.#ctor(HotChocolate.Language.IValueNode[])">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="items">
            The items of this list.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IValueNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="items">
            The items of this list.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ListValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ListValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ListValueNode.Items">
            <summary>
            The items of this list.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ListValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.WithItems(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.IValueNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ListValueNode.Items" /> with <paramref name="items" />.
            </summary>
            <param name="items">
            The <paramref name="items" /> that shall be used to replace the current <see cref="P:HotChocolate.Language.ListValueNode.Items"/>.
            </param>
            <returns>
            Returns the new node with the new <paramref name="items" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.Location">
            <summary>
            The location of a <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Location.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.Location"/>.
            </summary>
            <param name="start">The start position of the <see cref="T:HotChocolate.Language.ISyntaxNode"/>.</param>
            <param name="end">The end position of the <see cref="T:HotChocolate.Language.ISyntaxNode"/>.</param>
            <param name="line">The line in which the <see cref="T:HotChocolate.Language.ISyntaxNode"/> is located.</param>
            <param name="column">The column in which the <see cref="T:HotChocolate.Language.ISyntaxNode"/> is located.</param>
        </member>
        <member name="P:HotChocolate.Language.Location.Start">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.End">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> ends.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.Line">
            <summary>
            Gets the 1-indexed line number on which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> appears.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.Column">
            <summary>
            Gets the 1-indexed column number at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> begins.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Location.Equals(HotChocolate.Language.Location)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            <see langword="true" /> if the current object is equal to the
            <paramref name="other" /> parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Location.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">
            The object to compare with the current object.
            </param>
            <returns>
            <c>true</c> if the specified object  is equal to the current object;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Location.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>
            A hash code for the current object.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.NamedSyntaxNode">
            <summary>
            The base class for named syntax nodes.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NamedSyntaxNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.NamedSyntaxNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="directives">
            The directives that are annotated to this syntax node.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:HotChocolate.Language.NamedSyntaxNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NamedSyntaxNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NamedSyntaxNode.Name">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NamedSyntaxNode.Directives">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.NamedSyntaxNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.NamedSyntaxNode.ToString(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.NamedSyntaxNode.ToString">
            <inheritdoc cref="M:HotChocolate.Language.ISyntaxNode.ToString" />
        </member>
        <member name="T:HotChocolate.Language.NamedTypeNode">
            <summary>
            Represents a named type syntax.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.NamedTypeNode"/>.
            </summary>
            <param name="name">
            The name of the type.
            </param>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.#ctor(HotChocolate.Language.NameNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.NamedTypeNode"/>.
            </summary>
            <param name="name">
            The name of the type.
            </param>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.NamedTypeNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the type.
            </param>
        </member>
        <member name="P:HotChocolate.Language.NamedTypeNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NamedTypeNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NamedTypeNode.Name">
            <summary>
            Gets the type name.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedTypeNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NamedTypeNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.Equals(HotChocolate.Language.NameNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.NameNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.NameNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.NameNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.NameNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NameNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.NameNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.NameNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.NameNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NonNullTypeNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NonNullTypeNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.NullValueNode">
            <summary>
            Represents the null value syntax.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.#ctor(HotChocolate.Language.Location)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
        </member>
        <member name="P:HotChocolate.Language.NullValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NullValueNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.NullValueNode.Value">
            <summary>
            The null runtime value.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(HotChocolate.Language.NullValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.NullValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.NullValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.NullValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.NullValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.NullValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NullValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="P:HotChocolate.Language.NullValueNode.Default">
            <summary>
            Gets the default null value instance.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ObjectFieldNode">
            <summary>
            Represents an object field literal.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(System.String,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.IValueNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the field.
            </param>
            <param name="value">
            The assigned field value.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ObjectFieldNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ObjectFieldNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ObjectFieldNode.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ObjectFieldNode.Value">
            <summary>
            Gets the assigned field value.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.Equals(HotChocolate.Language.ObjectFieldNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.ObjectFieldNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.ObjectFieldNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.ObjectFieldNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ObjectFieldNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ObjectFieldNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.WithValue(HotChocolate.Language.IValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ObjectFieldNode.Value" /> with <paramref name="value" />.
            </summary>
            <param name="value">
            The value that shall be used to replace the current <see cref="P:HotChocolate.Language.ObjectFieldNode.Value" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="value" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ObjectTypeDefinitionNode">
            <summary>
            <para>
            GraphQL operations are hierarchical and composed, describing a tree of information.
            While Scalar types describe the leaf values of these hierarchical operations,
            Objects describe the intermediate levels.
            </para>
            <para>
            GraphQL Objects represent a list of named fields, each of which yield a value
            of a specific type. Object values should be serialized as ordered maps,
            where the selected field names (or aliases) are the keys and the result
            of evaluating the field is the value, ordered by the order in which they
            appear in the selection set.
            </para>
            <para>
            All fields defined within an Object type must not have a name which begins with
            "__" (two underscores), as this is used exclusively by GraphQL’s introspection system.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="description">
            The description of the definition
            </param>
            <param name="directives">
            The directives that are annotated to this syntax node.
            </param>
            <param name="interfaces">
            The interfaces that this type implements.
            </param>
            <param name="fields">
            The fields that this type exposes.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ObjectTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ObjectTypeDefinitionNode.Description">
            <summary>
            Gets the description of this definition
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location"/> with <paramref name="location"/>.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.NameNode"/> with <paramref name="name"/>
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.StringValueNode"/> with <paramref name="description"/>
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> with <paramref name="directives"/>
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithInterfaces(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> with <paramref name="interfaces"/>
            </summary>
            <param name="interfaces">
            The interfaces that shall be used to replace the current interfaces.
            </param>
            <returns>
            Returns the new node with the new <paramref name="interfaces"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeDefinitionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> with <paramref name="fields"/>
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current fields.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields"/>
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ObjectTypeExtensionNode">
            <summary>
            Object type extensions are used to represent a type which has been extended
            from some original type. For example, this might be used to represent local data,
            or by a GraphQL service which is itself an extension of another GraphQL service.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectTypeExtensionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name that this syntax node holds.
            </param>
            <param name="directives">
            The directives that are annotated to this syntax node.
            </param>
            <param name="interfaces">
            The interfaces that this type implements.
            </param>
            <param name="fields">
            The fields that this type exposes.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ObjectTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location"/> with <paramref name="location"/>.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.NameNode"/> with <paramref name="name"/>
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives"/> with <paramref name="directives"/>
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current directives.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.WithInterfaces(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Interfaces"/> with <paramref name="interfaces"/>
            </summary>
            <param name="interfaces">
            The interfaces that shall be used to replace the current interfaces.
            </param>
            <returns>
            Returns the new node with the new <paramref name="interfaces"/>
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectTypeExtensionNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.FieldDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ComplexTypeDefinitionNodeBase.Fields"/> with <paramref name="fields"/>
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current fields.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields"/>
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ObjectValueNode">
            <summary>
            <para>
            Represents a GraphQL object literal.
            </para>
            <para>
            Input object literal values are unordered lists of keyed input values
            wrapped in curly-braces { }.
            </para>
            <para>
            The values of an object literal may be any input value literal or
            variable (ex. { name: "Hello world", score: 1.0 }).
            </para>
            <para>We refer to literal representation of input objects as “object literals.”
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.#ctor(HotChocolate.Language.ObjectFieldNode[])">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="fields">
            The assigned field values.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ObjectFieldNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="fields">
            The assigned field values.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ObjectFieldNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="fields">
            The assigned field values.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ObjectValueNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ObjectValueNode.Location">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ObjectValueNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.WithFields(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ObjectFieldNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ObjectValueNode.Fields" /> with <paramref name="fields" />.
            </summary>
            <param name="fields">
            The fields that shall be used to replace the current <see cref="P:HotChocolate.Language.ObjectValueNode.Fields"/>.
            </param>
            <returns>
            Returns the new node with the new <paramref name="fields" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.OperationTypeDefinitionNode">
            <summary>
            Represents the operation type definition syntax.
            <code>
            schema { query: Query }
            </code>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.OperationType,HotChocolate.Language.NamedTypeNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.OperationTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="operation">
            The GraphQL operation.
            </param>
            <param name="type">
            The GraphQL type that represents the operation.
            </param>
        </member>
        <member name="P:HotChocolate.Language.OperationTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.OperationTypeDefinitionNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.OperationTypeDefinitionNode.Operation">
            <summary>
            Gets the GraphQL operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.OperationTypeDefinitionNode.Type">
            <summary>
            Gets the GraphQL operation type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.OperationTypeDefinitionNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.WithOperation(HotChocolate.Language.OperationType)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.OperationTypeDefinitionNode.Operation" /> with <paramref name="operation" />.
            </summary>
            <param name="operation">
            The operation that shall be used to replace the current operation.
            </param>
            <returns>
            Returns the new node with the new <paramref name="operation" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.OperationTypeDefinitionNode.WithType(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.OperationTypeDefinitionNode.Type" /> with <paramref name="type" />.
            </summary>
            <param name="type">
            The type that shall be used to replace the current type.
            </param>
            <returns>
            Returns the new node with the new <paramref name="type" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ScalarTypeDefinitionNode">
            <summary>
            <para>Represents the scalar definition syntax.</para>
            <para>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves of this tree are typically GraphQL Scalar types
            (but may also be Enum types or null values).
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ScalarTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the scalar.
            </param>
            <param name="description">
            The description of the scalar.
            </param>
            <param name="directives">
            The applied directives.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ScalarTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.ScalarTypeDefinitionNode.Description">
            <summary>
            Gets the scalar description.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.ScalarTypeDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.ScalarTypeExtensionNode">
            <summary>
            Scalar type extensions are used to represent a scalar type which has been
            extended from some original scalar type. For example, this might be used
            by a GraphQL tool or service which adds directives to an existing scalar.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.ScalarTypeExtensionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the scalar.
            </param>
            <param name="directives">
            The applied directives.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ScalarTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ScalarTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.SchemaCoordinateNode">
             <summary>
             A <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/> is a human readable string that uniquely identifies a
             schema element within a GraphQL Schema.
             A schema element is a specific instance of a named type, field, input field, enum value,
             field argument, directive, or directive argument.
             A <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/> is always unique. Each schema element may be referenced
             by exactly one possible schema coordinate.
            
             A <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/> may refer to either a defined or built-in schema element.
             For example, `String` and `@deprecated(reason:)` are both valid schema coordinates which refer
             to built-in schema elements. However it must not refer to a meta-field.
             For example, `Business.__typename` is <b>not</b> a valid schema coordinate.
            
             SchemaCoordinate :
              - Name
              - Name . Name
              - Name . Name ( Name : )
              - @ Name
              - @ Name ( Name : )
            
             <remarks>
             Note: A <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/> is not a definition within a GraphQL
             <see cref="T:HotChocolate.Language.DocumentNode"/>, but a separate standalone grammar, intended to be used by tools
             to reference types, fields, and other schema elements. For example as references within
             documentation, or as lookup keys in usage frequency tracking.
             </remarks>
             </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.#ctor(HotChocolate.Language.Location,System.Boolean,HotChocolate.Language.NameNode,HotChocolate.Language.NameNode,HotChocolate.Language.NameNode)">
            <summary>
            Creates a new instance of <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.OfDirective">
            <summary>
            Specifies if this <see cref="T:HotChocolate.Language.SchemaCoordinateNode"/> is a coordinate of a directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.Name">
            <summary>
            The name of the referenced <see cref="T:HotChocolate.Language.INamedSyntaxNode"/>
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.MemberName">
            <summary>
            The optional name of the referenced field or enum value
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SchemaCoordinateNode.ArgumentName">
            <summary>
            The optional name of the referenced argument
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaCoordinateNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.WithOfDirective(System.Boolean)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaCoordinateNode.OfDirective" /> with <paramref name="ofDirective" />.
            </summary>
            <param name="ofDirective">
            The ofDirective that shall be used to replace the current ofDirective.
            </param>
            <returns>
            Returns the new node with the new <paramref name="ofDirective" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaCoordinateNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current name.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.WithMemberName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaCoordinateNode.MemberName" /> with <paramref name="memberName" />.
            </summary>
            <param name="memberName">
            The memberName that shall be used to replace the current memberName.
            </param>
            <returns>
            Returns the new node with the new <paramref name="memberName" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaCoordinateNode.WithArgumentName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaCoordinateNode.ArgumentName" /> with <paramref name="argumentName" />.
            </summary>
            <param name="argumentName">
            The argumentName that shall be used to replace the current argumentName.
            </param>
            <returns>
            Returns the new node with the new <paramref name="argumentName" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.SchemaDefinitionNode">
            <summary>
            <para>
            Represents GraphQL schema definition syntax.
            </para>
            <para>
            A GraphQL service’s collective type system capabilities
            are referred to as that service’s “schema”.
            </para>
            <para>
            A schema is defined in terms of the types and directives it supports as well
            as the root operation types for each kind of operation: query, mutation, and subscription;
            this determines the place in the type system where those operations begin.
            </para>
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.OperationTypeDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.SchemaDefinitionNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="description">
            The description of the schema.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="operationTypes">
            The operation types.
            </param>
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNode.Kind">
            <inheritdoc cref="P:HotChocolate.Language.SchemaDefinitionNodeBase.Kind"/>
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNode.Description">
            <summary>
            Gets the schema description.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNode.WithOperationTypes(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.OperationTypeDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaDefinitionNodeBase.OperationTypes" /> with
            <paramref name="operationTypes" />.
            </summary>
            <param name="operationTypes">
            The operationTypes that shall be used to replace the current
            <see cref="P:HotChocolate.Language.SchemaDefinitionNodeBase.OperationTypes" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="operationTypes" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.SchemaDefinitionNodeBase">
            <summary>
            Represents the base class for <see cref="T:HotChocolate.Language.SchemaDefinitionNode"/> and
            <see cref="T:HotChocolate.Language.SchemaExtensionNode"/>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaDefinitionNodeBase.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.OperationTypeDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.SchemaDefinitionNodeBase"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="operationTypes">
            The operation types.
            </param>
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNodeBase.Kind">
            <inheritdoc cref="P:HotChocolate.Language.ISyntaxNode.Kind" />
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNodeBase.Location">
            <inheritdoc cref="P:HotChocolate.Language.ISyntaxNode.Location" />
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNodeBase.Directives">
            <summary>
            Gets the applied directives.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SchemaDefinitionNodeBase.OperationTypes">
            <summary>
            Gets the schema operation types.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.SchemaExtensionNode">
            <summary>
            Represents the schema definition extension syntax.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.OperationTypeDefinitionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.SchemaExtensionNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="directives">
            The applied directives.
            </param>
            <param name="operationTypes">
            The operation types.
            </param>
        </member>
        <member name="P:HotChocolate.Language.SchemaExtensionNode.Kind">
            <inheritdoc cref="P:HotChocolate.Language.ISyntaxNode.Kind" />
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.GetNodes">
            <inheritdoc cref="M:HotChocolate.Language.ISyntaxNode.GetNodes" />
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SchemaExtensionNode.WithOperationTypes(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.OperationTypeDefinitionNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.SchemaDefinitionNodeBase.OperationTypes" /> with
            <paramref name="operationTypes" />.
            </summary>
            <param name="operationTypes">
            The operationTypes that shall be used to replace the current
            <see cref="P:HotChocolate.Language.SchemaDefinitionNodeBase.OperationTypes" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="operationTypes" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.SelectionSetNode">
            <summary>
            Represents the selection set syntax.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SelectionSetNode.#ctor(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISelectionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.SchemaDefinitionNode"/>
            </summary>
            <param name="selections">
            The selections.
            </param>
        </member>
        <member name="M:HotChocolate.Language.SelectionSetNode.#ctor(HotChocolate.Language.Location,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISelectionNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.SchemaDefinitionNode"/>
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="selections">
            The selections.
            </param>
        </member>
        <member name="P:HotChocolate.Language.SelectionSetNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.SelectionSetNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.SelectionSetNode.Selections">
            <summary>
            Gets the selections.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SelectionSetNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.SelectionSetNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.SelectionSetNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.StringValueNode">
            <summary>
            Represents a string value literal.
            http://facebook.github.io/graphql/June2018/#sec-String-Value
            </summary>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.StringValueNode"/> class.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.#ctor(HotChocolate.Language.Location,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.StringValueNode"/> class.
            </summary>
            <param name="location">The source location.</param>
            <param name="value">The string value.</param>
            <param name="block">
            If set to <c>true</c> this instance represents a block string.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.#ctor(HotChocolate.Language.Location,System.ReadOnlyMemory{System.Byte},System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.StringValueNode"/> class.
            </summary>
            <param name="location">The source location.</param>
            <param name="value">The string value.</param>
            <param name="block">
            If set to <c>true</c> this instance represents a block string.
            </param>
        </member>
        <member name="P:HotChocolate.Language.StringValueNode.Kind">
            <inheritdoc cref="T:HotChocolate.Language.ISyntaxNode"/>
        </member>
        <member name="P:HotChocolate.Language.StringValueNode.Location">
            <inheritdoc cref="T:HotChocolate.Language.ISyntaxNode"/>
        </member>
        <member name="P:HotChocolate.Language.StringValueNode.Block">
            <summary>
            Gets a value indicating whether this <see cref="T:HotChocolate.Language.StringValueNode"/>
            was parsed from a block string.
            </summary>
            <value>
            <c>true</c> if this string value was parsed from a block string;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.GetNodes">
            <inheritdoc cref="T:HotChocolate.Language.ISyntaxNode"/>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.AsSpan">
            <summary>
            Gets a readonly span to access the string value memory.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.UnionTypeDefinitionNode">
            <summary>
            GraphQL Unions represent an object that could be one of a list of
            GraphQL Object types, but provides for no guaranteed fields between
            those types. They also differ from interfaces in that Object types
            declare what interfaces they implement, but are not aware of what
            unions contain them.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,HotChocolate.Language.StringValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.UnionTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object.
            </param>
            <param name="description">
            The description of the input object.
            </param>
            <param name="directives">
            The directives of this input object.
            </param>
            <param name="types">
            The types of the union type.
            </param>
        </member>
        <member name="P:HotChocolate.Language.UnionTypeDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.UnionTypeDefinitionNode.Description">
            <summary>
            Gets the union type description.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.WithDescription(HotChocolate.Language.StringValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.UnionTypeDefinitionNode.Description" /> with <paramref name="description" />.
            </summary>
            <param name="description">
            The description that shall be used to replace the current description.
            </param>
            <returns>
            Returns the new node with the new <paramref name="description" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNode.WithTypes(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.UnionTypeDefinitionNodeBase.Types" /> with <paramref name="types" />.
            </summary>
            <param name="types">
            The types that shall be used to replace the current
            <see cref="P:HotChocolate.Language.UnionTypeDefinitionNodeBase.Types" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="types" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.UnionTypeDefinitionNodeBase">
            <summary>
            The base class for union type and union type extension.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeDefinitionNodeBase.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.UnionTypeDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object.
            </param>
            <param name="directives">
            The directives of this input object.
            </param>
            <param name="types">
            The types of the union type.
            </param>
        </member>
        <member name="P:HotChocolate.Language.UnionTypeDefinitionNodeBase.Types">
            <summary>
            Gets the types of the union type.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.UnionTypeExtensionNode">
            <summary>
            Union type extensions are used to represent a union type which has been
            extended from some original union type.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.UnionTypeExtensionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object.
            </param>
            <param name="directives">
            The directives of this input object.
            </param>
            <param name="types">
            The types of the union type.
            </param>
        </member>
        <member name="P:HotChocolate.Language.UnionTypeExtensionNode.Kind">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="T:HotChocolate.Language.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.UnionTypeExtensionNode.WithTypes(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.NamedTypeNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.UnionTypeDefinitionNodeBase.Types" /> with <paramref name="types" />.
            </summary>
            <param name="types">
            The types that shall be used to replace the current
            <see cref="P:HotChocolate.Language.UnionTypeDefinitionNodeBase.Types" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="types" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.Utilities.ISyntaxWriter">
            <summary>
            This interface represents a GraphQL syntax writer.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.Indent">
            <summary>
            Increase writer indentation.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.Unindent">
            <summary>
            Decrease writer indentation.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.Write(System.Char)">
            <summary>
            Write a single character.
            </summary>
            <param name="c">
            The character that shall be written.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.Write(System.String)">
            <summary>
            Write a string.
            </summary>
            <param name="s">
            The string that shall be written.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.WriteLine(System.Boolean)">
            <summary>
            Write a line if the <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="condition">
            The condition that defines if a line shall be written.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.WriteSpace(System.Boolean)">
            <summary>
            Write a space if the <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="condition">
            The condition that defines if a space shall be written.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utilities.ISyntaxWriter.WriteIndent(System.Boolean)">
            <summary>
            Write the current indentation if the <paramref name="condition"/> is <c>true</c>.
            </summary>
            <param name="condition">
            The condition that defines if the current indentation shall be written.
            </param>
        </member>
        <member name="T:HotChocolate.Language.Utilities.SyntaxPrinter">
            <summary>
            This helper can serialize a GraphQL syntax tree into its string representation.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utilities.SyntaxPrinter.Print(HotChocolate.Language.ISyntaxNode,System.Boolean)">
            <summary>
            Prints a GraphQL syntax node`s string representation.
            </summary>
            <param name="node">The syntax node that shall be printed.</param>
            <param name="indented">Specified if the printed string shall have indentations.</param>
            <returns>
            Returns the printed GraphQL syntax tree.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Utilities.SyntaxPrinter.PrintToAsync(HotChocolate.Language.ISyntaxNode,System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Prints a GraphQL syntax node`s string representation into a stream.
            </summary>
            <param name="node">The syntax node that shall be printed.</param>
            <param name="stream">The stream to which the printed node shall be written to.</param>
            <param name="indented">Specified if the printed string shall have indentations.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Returns the printed GraphQL syntax tree.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.Utilities.SyntaxSerializer">
            <summary>
            This helper can serialize a GraphQL syntax tree into its string representation.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utilities.SyntaxSerializerOptions.Indented">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:HotChocolate.Language.Utilities.SyntaxSerializer" />
            should format the GraphQL output, which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </summary>
            <value>
            <c>true</c> to format the GraphQL output; <c>false</c> to write without any extra
            white space. The default is false.
            </value>
        </member>
        <member name="P:HotChocolate.Language.Utilities.SyntaxSerializerOptions.MaxDirectivesPerLine">
             <summary>
             Defines how many directives are allowed on the same line as
             the declaration before directives are put on separate lines.
            
             <code>
             type Foo @a @b @c {
               bar: String
             }
             </code>
            
             <code>
             type Foo
               @a
               @b
               @c {
               bar: String
             }
             </code>
             </summary>
        </member>
        <member name="T:HotChocolate.Language.VariableDefinitionNode">
            <summary>
            The variable definition syntax of a GraphQL operation.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.VariableNode,HotChocolate.Language.ITypeNode,HotChocolate.Language.IValueNode,System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.VariableDefinitionNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="variable">
            The variable.
            </param>
            <param name="type">
            The variable type.
            </param>
            <param name="defaultValue">
            The variables default value.
            </param>
            <param name="directives">
            The directives of this variable declaration.
            </param>
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.Variable">
            <summary>
            Gets the variable.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.Type">
            <summary>
            Gets the variable type.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.DefaultValue">
            <summary>
            Gets the variables default value.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.VariableDefinitionNode.Directives">
            <summary>
            Gets the directives of this variable declaration.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.WithVariable(HotChocolate.Language.VariableNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.Variable" /> with <paramref name="variable" />.
            </summary>
            <param name="variable">
            The variable that shall be used to replace the current <see cref="P:HotChocolate.Language.VariableDefinitionNode.Variable" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="variable" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.WithType(HotChocolate.Language.ITypeNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.Type" /> with <paramref name="type" />.
            </summary>
            <param name="type">
            The type that shall be used to replace the current <see cref="P:HotChocolate.Language.VariableDefinitionNode.Type" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="type" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.WithDefaultValue(HotChocolate.Language.IValueNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.DefaultValue" /> with <paramref name="defaultValue" />.
            </summary>
            <param name="defaultValue">
            The defaultValue that shall be used to replace the current <see cref="P:HotChocolate.Language.VariableDefinitionNode.DefaultValue" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="defaultValue" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableDefinitionNode.WithDirectives(System.Collections.Generic.IReadOnlyList{HotChocolate.Language.DirectiveNode})">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.Directives" /> with <paramref name="directives" />.
            </summary>
            <param name="directives">
            The directives that shall be used to replace the current
            <see cref="P:HotChocolate.Language.VariableDefinitionNode.Directives" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="directives" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.VariableNode">
            <summary>
            Represent a GraphQL variable syntax.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="name">
            The name of the input object.
            </param>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.#ctor(HotChocolate.Language.NameNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="name">
            The name of the input object.
            </param>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.#ctor(HotChocolate.Language.Location,HotChocolate.Language.NameNode)">
            <summary>
            Initializes a new instance of <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="location">
            The location of the syntax node within the original source text.
            </param>
            <param name="name">
            The name of the input object.
            </param>
        </member>
        <member name="P:HotChocolate.Language.VariableNode.Kind">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.VariableNode.Location">
            <inheritdoc />
        </member>
        <member name="P:HotChocolate.Language.VariableNode.Name">
            <summary>
            Gets the variable name.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.GetNodes">
            <inheritdoc />
        </member>
        <member name="M:HotChocolate.Language.VariableNode.ToString">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.ToString(System.Boolean)">
            <summary>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </summary>
            <param name="indented">
            A value that indicates whether the GraphQL output should be formatted,
            which includes indenting nested GraphQL tokens, adding
            new lines, and adding white space between property names and values.
            </param>
            <returns>
            Returns the GraphQL syntax representation of this <see cref="T:HotChocolate.Language.ISyntaxNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.WithLocation(HotChocolate.Language.Location)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.VariableNode.Location" /> with <paramref name="location" />.
            </summary>
            <param name="location">
            The location that shall be used to replace the current location.
            </param>
            <returns>
            Returns the new node with the new <paramref name="location" />.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.WithName(HotChocolate.Language.NameNode)">
            <summary>
            Creates a new node from the current instance and replaces the
            <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" /> with <paramref name="name" />.
            </summary>
            <param name="name">
            The name that shall be used to replace the current <see cref="P:HotChocolate.Language.NamedSyntaxNode.Name" />.
            </param>
            <returns>
            Returns the new node with the new <paramref name="name" />.
            </returns>
        </member>
    </members>
</doc>
